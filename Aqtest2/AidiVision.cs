//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace aqrose.aidi_vision_client {

public class IntVector : global::System.IDisposable, global::System.Collections.IEnumerable
    , global::System.Collections.Generic.IList<int>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IntVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IntVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IntVector() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_IntVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public IntVector(global::System.Collections.ICollection c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (int element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public int this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)capacity();
    }
    set {
      if (value < size())
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      reserve((uint)value);
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(int[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(int[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, int[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  global::System.Collections.Generic.IEnumerator<int> global::System.Collections.Generic.IEnumerable<int>.GetEnumerator() {
    return new IntVectorEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new IntVectorEnumerator(this);
  }

  public IntVectorEnumerator GetEnumerator() {
    return new IntVectorEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class IntVectorEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<int>
  {
    private IntVector collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public IntVectorEnumerator(IntVector collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public int Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (int)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public void Clear() {
    aidi_vision_clientPINVOKE.IntVector_Clear(swigCPtr);
  }

  public void Add(int x) {
    aidi_vision_clientPINVOKE.IntVector_Add(swigCPtr, x);
  }

  private uint size() {
    uint ret = aidi_vision_clientPINVOKE.IntVector_size(swigCPtr);
    return ret;
  }

  private uint capacity() {
    uint ret = aidi_vision_clientPINVOKE.IntVector_capacity(swigCPtr);
    return ret;
  }

  private void reserve(uint n) {
    aidi_vision_clientPINVOKE.IntVector_reserve(swigCPtr, n);
  }

  public IntVector() : this(aidi_vision_clientPINVOKE.new_IntVector__SWIG_0(), true) {
  }

  public IntVector(IntVector other) : this(aidi_vision_clientPINVOKE.new_IntVector__SWIG_1(IntVector.getCPtr(other)), true) {
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public IntVector(int capacity) : this(aidi_vision_clientPINVOKE.new_IntVector__SWIG_2(capacity), true) {
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  private int getitemcopy(int index) {
    int ret = aidi_vision_clientPINVOKE.IntVector_getitemcopy(swigCPtr, index);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private int getitem(int index) {
    int ret = aidi_vision_clientPINVOKE.IntVector_getitem(swigCPtr, index);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, int val) {
    aidi_vision_clientPINVOKE.IntVector_setitem(swigCPtr, index, val);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRange(IntVector values) {
    aidi_vision_clientPINVOKE.IntVector_AddRange(swigCPtr, IntVector.getCPtr(values));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public IntVector GetRange(int index, int count) {
    global::System.IntPtr cPtr = aidi_vision_clientPINVOKE.IntVector_GetRange(swigCPtr, index, count);
    IntVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntVector(cPtr, true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Insert(int index, int x) {
    aidi_vision_clientPINVOKE.IntVector_Insert(swigCPtr, index, x);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertRange(int index, IntVector values) {
    aidi_vision_clientPINVOKE.IntVector_InsertRange(swigCPtr, index, IntVector.getCPtr(values));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    aidi_vision_clientPINVOKE.IntVector_RemoveAt(swigCPtr, index);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRange(int index, int count) {
    aidi_vision_clientPINVOKE.IntVector_RemoveRange(swigCPtr, index, count);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static IntVector Repeat(int value, int count) {
    global::System.IntPtr cPtr = aidi_vision_clientPINVOKE.IntVector_Repeat(value, count);
    IntVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntVector(cPtr, true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reverse() {
    aidi_vision_clientPINVOKE.IntVector_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    aidi_vision_clientPINVOKE.IntVector_Reverse__SWIG_1(swigCPtr, index, count);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRange(int index, IntVector values) {
    aidi_vision_clientPINVOKE.IntVector_SetRange(swigCPtr, index, IntVector.getCPtr(values));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Contains(int value) {
    bool ret = aidi_vision_clientPINVOKE.IntVector_Contains(swigCPtr, value);
    return ret;
  }

  public int IndexOf(int value) {
    int ret = aidi_vision_clientPINVOKE.IntVector_IndexOf(swigCPtr, value);
    return ret;
  }

  public int LastIndexOf(int value) {
    int ret = aidi_vision_clientPINVOKE.IntVector_LastIndexOf(swigCPtr, value);
    return ret;
  }

  public bool Remove(int value) {
    bool ret = aidi_vision_clientPINVOKE.IntVector_Remove(swigCPtr, value);
    return ret;
  }

}

}
namespace aqrose.aidi_vision_client {

public class FloatVector : global::System.IDisposable, global::System.Collections.IEnumerable
    , global::System.Collections.Generic.IList<float>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FloatVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FloatVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FloatVector() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_FloatVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public FloatVector(global::System.Collections.ICollection c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (float element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public float this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)capacity();
    }
    set {
      if (value < size())
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      reserve((uint)value);
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(float[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(float[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, float[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  global::System.Collections.Generic.IEnumerator<float> global::System.Collections.Generic.IEnumerable<float>.GetEnumerator() {
    return new FloatVectorEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new FloatVectorEnumerator(this);
  }

  public FloatVectorEnumerator GetEnumerator() {
    return new FloatVectorEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class FloatVectorEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<float>
  {
    private FloatVector collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public FloatVectorEnumerator(FloatVector collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public float Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (float)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public void Clear() {
    aidi_vision_clientPINVOKE.FloatVector_Clear(swigCPtr);
  }

  public void Add(float x) {
    aidi_vision_clientPINVOKE.FloatVector_Add(swigCPtr, x);
  }

  private uint size() {
    uint ret = aidi_vision_clientPINVOKE.FloatVector_size(swigCPtr);
    return ret;
  }

  private uint capacity() {
    uint ret = aidi_vision_clientPINVOKE.FloatVector_capacity(swigCPtr);
    return ret;
  }

  private void reserve(uint n) {
    aidi_vision_clientPINVOKE.FloatVector_reserve(swigCPtr, n);
  }

  public FloatVector() : this(aidi_vision_clientPINVOKE.new_FloatVector__SWIG_0(), true) {
  }

  public FloatVector(FloatVector other) : this(aidi_vision_clientPINVOKE.new_FloatVector__SWIG_1(FloatVector.getCPtr(other)), true) {
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public FloatVector(int capacity) : this(aidi_vision_clientPINVOKE.new_FloatVector__SWIG_2(capacity), true) {
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  private float getitemcopy(int index) {
    float ret = aidi_vision_clientPINVOKE.FloatVector_getitemcopy(swigCPtr, index);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private float getitem(int index) {
    float ret = aidi_vision_clientPINVOKE.FloatVector_getitem(swigCPtr, index);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, float val) {
    aidi_vision_clientPINVOKE.FloatVector_setitem(swigCPtr, index, val);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRange(FloatVector values) {
    aidi_vision_clientPINVOKE.FloatVector_AddRange(swigCPtr, FloatVector.getCPtr(values));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public FloatVector GetRange(int index, int count) {
    global::System.IntPtr cPtr = aidi_vision_clientPINVOKE.FloatVector_GetRange(swigCPtr, index, count);
    FloatVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new FloatVector(cPtr, true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Insert(int index, float x) {
    aidi_vision_clientPINVOKE.FloatVector_Insert(swigCPtr, index, x);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertRange(int index, FloatVector values) {
    aidi_vision_clientPINVOKE.FloatVector_InsertRange(swigCPtr, index, FloatVector.getCPtr(values));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    aidi_vision_clientPINVOKE.FloatVector_RemoveAt(swigCPtr, index);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRange(int index, int count) {
    aidi_vision_clientPINVOKE.FloatVector_RemoveRange(swigCPtr, index, count);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static FloatVector Repeat(float value, int count) {
    global::System.IntPtr cPtr = aidi_vision_clientPINVOKE.FloatVector_Repeat(value, count);
    FloatVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new FloatVector(cPtr, true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reverse() {
    aidi_vision_clientPINVOKE.FloatVector_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    aidi_vision_clientPINVOKE.FloatVector_Reverse__SWIG_1(swigCPtr, index, count);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRange(int index, FloatVector values) {
    aidi_vision_clientPINVOKE.FloatVector_SetRange(swigCPtr, index, FloatVector.getCPtr(values));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Contains(float value) {
    bool ret = aidi_vision_clientPINVOKE.FloatVector_Contains(swigCPtr, value);
    return ret;
  }

  public int IndexOf(float value) {
    int ret = aidi_vision_clientPINVOKE.FloatVector_IndexOf(swigCPtr, value);
    return ret;
  }

  public int LastIndexOf(float value) {
    int ret = aidi_vision_clientPINVOKE.FloatVector_LastIndexOf(swigCPtr, value);
    return ret;
  }

  public bool Remove(float value) {
    bool ret = aidi_vision_clientPINVOKE.FloatVector_Remove(swigCPtr, value);
    return ret;
  }

}

}
namespace aqrose.aidi_vision_client {

public class DoubleVector : global::System.IDisposable, global::System.Collections.IEnumerable
    , global::System.Collections.Generic.IList<double>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DoubleVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DoubleVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DoubleVector() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_DoubleVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public DoubleVector(global::System.Collections.ICollection c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (double element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public double this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)capacity();
    }
    set {
      if (value < size())
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      reserve((uint)value);
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(double[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(double[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, double[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  global::System.Collections.Generic.IEnumerator<double> global::System.Collections.Generic.IEnumerable<double>.GetEnumerator() {
    return new DoubleVectorEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new DoubleVectorEnumerator(this);
  }

  public DoubleVectorEnumerator GetEnumerator() {
    return new DoubleVectorEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class DoubleVectorEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<double>
  {
    private DoubleVector collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public DoubleVectorEnumerator(DoubleVector collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public double Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (double)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public void Clear() {
    aidi_vision_clientPINVOKE.DoubleVector_Clear(swigCPtr);
  }

  public void Add(double x) {
    aidi_vision_clientPINVOKE.DoubleVector_Add(swigCPtr, x);
  }

  private uint size() {
    uint ret = aidi_vision_clientPINVOKE.DoubleVector_size(swigCPtr);
    return ret;
  }

  private uint capacity() {
    uint ret = aidi_vision_clientPINVOKE.DoubleVector_capacity(swigCPtr);
    return ret;
  }

  private void reserve(uint n) {
    aidi_vision_clientPINVOKE.DoubleVector_reserve(swigCPtr, n);
  }

  public DoubleVector() : this(aidi_vision_clientPINVOKE.new_DoubleVector__SWIG_0(), true) {
  }

  public DoubleVector(DoubleVector other) : this(aidi_vision_clientPINVOKE.new_DoubleVector__SWIG_1(DoubleVector.getCPtr(other)), true) {
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public DoubleVector(int capacity) : this(aidi_vision_clientPINVOKE.new_DoubleVector__SWIG_2(capacity), true) {
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  private double getitemcopy(int index) {
    double ret = aidi_vision_clientPINVOKE.DoubleVector_getitemcopy(swigCPtr, index);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private double getitem(int index) {
    double ret = aidi_vision_clientPINVOKE.DoubleVector_getitem(swigCPtr, index);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, double val) {
    aidi_vision_clientPINVOKE.DoubleVector_setitem(swigCPtr, index, val);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRange(DoubleVector values) {
    aidi_vision_clientPINVOKE.DoubleVector_AddRange(swigCPtr, DoubleVector.getCPtr(values));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public DoubleVector GetRange(int index, int count) {
    global::System.IntPtr cPtr = aidi_vision_clientPINVOKE.DoubleVector_GetRange(swigCPtr, index, count);
    DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Insert(int index, double x) {
    aidi_vision_clientPINVOKE.DoubleVector_Insert(swigCPtr, index, x);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertRange(int index, DoubleVector values) {
    aidi_vision_clientPINVOKE.DoubleVector_InsertRange(swigCPtr, index, DoubleVector.getCPtr(values));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    aidi_vision_clientPINVOKE.DoubleVector_RemoveAt(swigCPtr, index);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRange(int index, int count) {
    aidi_vision_clientPINVOKE.DoubleVector_RemoveRange(swigCPtr, index, count);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static DoubleVector Repeat(double value, int count) {
    global::System.IntPtr cPtr = aidi_vision_clientPINVOKE.DoubleVector_Repeat(value, count);
    DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reverse() {
    aidi_vision_clientPINVOKE.DoubleVector_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    aidi_vision_clientPINVOKE.DoubleVector_Reverse__SWIG_1(swigCPtr, index, count);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRange(int index, DoubleVector values) {
    aidi_vision_clientPINVOKE.DoubleVector_SetRange(swigCPtr, index, DoubleVector.getCPtr(values));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Contains(double value) {
    bool ret = aidi_vision_clientPINVOKE.DoubleVector_Contains(swigCPtr, value);
    return ret;
  }

  public int IndexOf(double value) {
    int ret = aidi_vision_clientPINVOKE.DoubleVector_IndexOf(swigCPtr, value);
    return ret;
  }

  public int LastIndexOf(double value) {
    int ret = aidi_vision_clientPINVOKE.DoubleVector_LastIndexOf(swigCPtr, value);
    return ret;
  }

  public bool Remove(double value) {
    bool ret = aidi_vision_clientPINVOKE.DoubleVector_Remove(swigCPtr, value);
    return ret;
  }

}

}
namespace aqrose.aidi_vision_client {

public class StringVector : global::System.IDisposable, global::System.Collections.IEnumerable
    , global::System.Collections.Generic.IList<string>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal StringVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(StringVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~StringVector() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_StringVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public StringVector(global::System.Collections.ICollection c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (string element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public string this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)capacity();
    }
    set {
      if (value < size())
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      reserve((uint)value);
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(string[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(string[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, string[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  global::System.Collections.Generic.IEnumerator<string> global::System.Collections.Generic.IEnumerable<string>.GetEnumerator() {
    return new StringVectorEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new StringVectorEnumerator(this);
  }

  public StringVectorEnumerator GetEnumerator() {
    return new StringVectorEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class StringVectorEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<string>
  {
    private StringVector collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public StringVectorEnumerator(StringVector collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public string Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (string)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public void Clear() {
    aidi_vision_clientPINVOKE.StringVector_Clear(swigCPtr);
  }

  public void Add(string x) {
    aidi_vision_clientPINVOKE.StringVector_Add(swigCPtr, x);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = aidi_vision_clientPINVOKE.StringVector_size(swigCPtr);
    return ret;
  }

  private uint capacity() {
    uint ret = aidi_vision_clientPINVOKE.StringVector_capacity(swigCPtr);
    return ret;
  }

  private void reserve(uint n) {
    aidi_vision_clientPINVOKE.StringVector_reserve(swigCPtr, n);
  }

  public StringVector() : this(aidi_vision_clientPINVOKE.new_StringVector__SWIG_0(), true) {
  }

  public StringVector(StringVector other) : this(aidi_vision_clientPINVOKE.new_StringVector__SWIG_1(StringVector.getCPtr(other)), true) {
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public StringVector(int capacity) : this(aidi_vision_clientPINVOKE.new_StringVector__SWIG_2(capacity), true) {
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  private string getitemcopy(int index) {
    string ret = aidi_vision_clientPINVOKE.StringVector_getitemcopy(swigCPtr, index);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private string getitem(int index) {
    string ret = aidi_vision_clientPINVOKE.StringVector_getitem(swigCPtr, index);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, string val) {
    aidi_vision_clientPINVOKE.StringVector_setitem(swigCPtr, index, val);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRange(StringVector values) {
    aidi_vision_clientPINVOKE.StringVector_AddRange(swigCPtr, StringVector.getCPtr(values));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public StringVector GetRange(int index, int count) {
    global::System.IntPtr cPtr = aidi_vision_clientPINVOKE.StringVector_GetRange(swigCPtr, index, count);
    StringVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new StringVector(cPtr, true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Insert(int index, string x) {
    aidi_vision_clientPINVOKE.StringVector_Insert(swigCPtr, index, x);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertRange(int index, StringVector values) {
    aidi_vision_clientPINVOKE.StringVector_InsertRange(swigCPtr, index, StringVector.getCPtr(values));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    aidi_vision_clientPINVOKE.StringVector_RemoveAt(swigCPtr, index);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRange(int index, int count) {
    aidi_vision_clientPINVOKE.StringVector_RemoveRange(swigCPtr, index, count);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static StringVector Repeat(string value, int count) {
    global::System.IntPtr cPtr = aidi_vision_clientPINVOKE.StringVector_Repeat(value, count);
    StringVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new StringVector(cPtr, true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reverse() {
    aidi_vision_clientPINVOKE.StringVector_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    aidi_vision_clientPINVOKE.StringVector_Reverse__SWIG_1(swigCPtr, index, count);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRange(int index, StringVector values) {
    aidi_vision_clientPINVOKE.StringVector_SetRange(swigCPtr, index, StringVector.getCPtr(values));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Contains(string value) {
    bool ret = aidi_vision_clientPINVOKE.StringVector_Contains(swigCPtr, value);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int IndexOf(string value) {
    int ret = aidi_vision_clientPINVOKE.StringVector_IndexOf(swigCPtr, value);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int LastIndexOf(string value) {
    int ret = aidi_vision_clientPINVOKE.StringVector_LastIndexOf(swigCPtr, value);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Remove(string value) {
    bool ret = aidi_vision_clientPINVOKE.StringVector_Remove(swigCPtr, value);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace aqrose.aidi_vision_client {

public class VecFloatVector : global::System.IDisposable, global::System.Collections.IEnumerable
    , global::System.Collections.Generic.IEnumerable<FloatVector>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal VecFloatVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(VecFloatVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~VecFloatVector() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_VecFloatVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public VecFloatVector(global::System.Collections.ICollection c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (FloatVector element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public FloatVector this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)capacity();
    }
    set {
      if (value < size())
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      reserve((uint)value);
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(FloatVector[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(FloatVector[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, FloatVector[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  global::System.Collections.Generic.IEnumerator<FloatVector> global::System.Collections.Generic.IEnumerable<FloatVector>.GetEnumerator() {
    return new VecFloatVectorEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new VecFloatVectorEnumerator(this);
  }

  public VecFloatVectorEnumerator GetEnumerator() {
    return new VecFloatVectorEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class VecFloatVectorEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<FloatVector>
  {
    private VecFloatVector collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public VecFloatVectorEnumerator(VecFloatVector collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public FloatVector Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (FloatVector)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public void Clear() {
    aidi_vision_clientPINVOKE.VecFloatVector_Clear(swigCPtr);
  }

  public void Add(FloatVector x) {
    aidi_vision_clientPINVOKE.VecFloatVector_Add(swigCPtr, FloatVector.getCPtr(x));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = aidi_vision_clientPINVOKE.VecFloatVector_size(swigCPtr);
    return ret;
  }

  private uint capacity() {
    uint ret = aidi_vision_clientPINVOKE.VecFloatVector_capacity(swigCPtr);
    return ret;
  }

  private void reserve(uint n) {
    aidi_vision_clientPINVOKE.VecFloatVector_reserve(swigCPtr, n);
  }

  public VecFloatVector() : this(aidi_vision_clientPINVOKE.new_VecFloatVector__SWIG_0(), true) {
  }

  public VecFloatVector(VecFloatVector other) : this(aidi_vision_clientPINVOKE.new_VecFloatVector__SWIG_1(VecFloatVector.getCPtr(other)), true) {
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public VecFloatVector(int capacity) : this(aidi_vision_clientPINVOKE.new_VecFloatVector__SWIG_2(capacity), true) {
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  private FloatVector getitemcopy(int index) {
    FloatVector ret = new FloatVector(aidi_vision_clientPINVOKE.VecFloatVector_getitemcopy(swigCPtr, index), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private FloatVector getitem(int index) {
    FloatVector ret = new FloatVector(aidi_vision_clientPINVOKE.VecFloatVector_getitem(swigCPtr, index), false);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, FloatVector val) {
    aidi_vision_clientPINVOKE.VecFloatVector_setitem(swigCPtr, index, FloatVector.getCPtr(val));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRange(VecFloatVector values) {
    aidi_vision_clientPINVOKE.VecFloatVector_AddRange(swigCPtr, VecFloatVector.getCPtr(values));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public VecFloatVector GetRange(int index, int count) {
    global::System.IntPtr cPtr = aidi_vision_clientPINVOKE.VecFloatVector_GetRange(swigCPtr, index, count);
    VecFloatVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new VecFloatVector(cPtr, true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Insert(int index, FloatVector x) {
    aidi_vision_clientPINVOKE.VecFloatVector_Insert(swigCPtr, index, FloatVector.getCPtr(x));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertRange(int index, VecFloatVector values) {
    aidi_vision_clientPINVOKE.VecFloatVector_InsertRange(swigCPtr, index, VecFloatVector.getCPtr(values));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    aidi_vision_clientPINVOKE.VecFloatVector_RemoveAt(swigCPtr, index);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRange(int index, int count) {
    aidi_vision_clientPINVOKE.VecFloatVector_RemoveRange(swigCPtr, index, count);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VecFloatVector Repeat(FloatVector value, int count) {
    global::System.IntPtr cPtr = aidi_vision_clientPINVOKE.VecFloatVector_Repeat(FloatVector.getCPtr(value), count);
    VecFloatVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new VecFloatVector(cPtr, true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reverse() {
    aidi_vision_clientPINVOKE.VecFloatVector_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    aidi_vision_clientPINVOKE.VecFloatVector_Reverse__SWIG_1(swigCPtr, index, count);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRange(int index, VecFloatVector values) {
    aidi_vision_clientPINVOKE.VecFloatVector_SetRange(swigCPtr, index, VecFloatVector.getCPtr(values));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace aqrose.aidi_vision_client {

public class VecDoubleVector : global::System.IDisposable, global::System.Collections.IEnumerable
    , global::System.Collections.Generic.IEnumerable<DoubleVector>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal VecDoubleVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(VecDoubleVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~VecDoubleVector() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_VecDoubleVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public VecDoubleVector(global::System.Collections.ICollection c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (DoubleVector element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public DoubleVector this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)capacity();
    }
    set {
      if (value < size())
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      reserve((uint)value);
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(DoubleVector[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(DoubleVector[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, DoubleVector[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  global::System.Collections.Generic.IEnumerator<DoubleVector> global::System.Collections.Generic.IEnumerable<DoubleVector>.GetEnumerator() {
    return new VecDoubleVectorEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new VecDoubleVectorEnumerator(this);
  }

  public VecDoubleVectorEnumerator GetEnumerator() {
    return new VecDoubleVectorEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class VecDoubleVectorEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<DoubleVector>
  {
    private VecDoubleVector collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public VecDoubleVectorEnumerator(VecDoubleVector collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public DoubleVector Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (DoubleVector)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public void Clear() {
    aidi_vision_clientPINVOKE.VecDoubleVector_Clear(swigCPtr);
  }

  public void Add(DoubleVector x) {
    aidi_vision_clientPINVOKE.VecDoubleVector_Add(swigCPtr, DoubleVector.getCPtr(x));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = aidi_vision_clientPINVOKE.VecDoubleVector_size(swigCPtr);
    return ret;
  }

  private uint capacity() {
    uint ret = aidi_vision_clientPINVOKE.VecDoubleVector_capacity(swigCPtr);
    return ret;
  }

  private void reserve(uint n) {
    aidi_vision_clientPINVOKE.VecDoubleVector_reserve(swigCPtr, n);
  }

  public VecDoubleVector() : this(aidi_vision_clientPINVOKE.new_VecDoubleVector__SWIG_0(), true) {
  }

  public VecDoubleVector(VecDoubleVector other) : this(aidi_vision_clientPINVOKE.new_VecDoubleVector__SWIG_1(VecDoubleVector.getCPtr(other)), true) {
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public VecDoubleVector(int capacity) : this(aidi_vision_clientPINVOKE.new_VecDoubleVector__SWIG_2(capacity), true) {
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  private DoubleVector getitemcopy(int index) {
    DoubleVector ret = new DoubleVector(aidi_vision_clientPINVOKE.VecDoubleVector_getitemcopy(swigCPtr, index), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private DoubleVector getitem(int index) {
    DoubleVector ret = new DoubleVector(aidi_vision_clientPINVOKE.VecDoubleVector_getitem(swigCPtr, index), false);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, DoubleVector val) {
    aidi_vision_clientPINVOKE.VecDoubleVector_setitem(swigCPtr, index, DoubleVector.getCPtr(val));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRange(VecDoubleVector values) {
    aidi_vision_clientPINVOKE.VecDoubleVector_AddRange(swigCPtr, VecDoubleVector.getCPtr(values));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public VecDoubleVector GetRange(int index, int count) {
    global::System.IntPtr cPtr = aidi_vision_clientPINVOKE.VecDoubleVector_GetRange(swigCPtr, index, count);
    VecDoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new VecDoubleVector(cPtr, true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Insert(int index, DoubleVector x) {
    aidi_vision_clientPINVOKE.VecDoubleVector_Insert(swigCPtr, index, DoubleVector.getCPtr(x));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertRange(int index, VecDoubleVector values) {
    aidi_vision_clientPINVOKE.VecDoubleVector_InsertRange(swigCPtr, index, VecDoubleVector.getCPtr(values));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    aidi_vision_clientPINVOKE.VecDoubleVector_RemoveAt(swigCPtr, index);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRange(int index, int count) {
    aidi_vision_clientPINVOKE.VecDoubleVector_RemoveRange(swigCPtr, index, count);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VecDoubleVector Repeat(DoubleVector value, int count) {
    global::System.IntPtr cPtr = aidi_vision_clientPINVOKE.VecDoubleVector_Repeat(DoubleVector.getCPtr(value), count);
    VecDoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new VecDoubleVector(cPtr, true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reverse() {
    aidi_vision_clientPINVOKE.VecDoubleVector_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    aidi_vision_clientPINVOKE.VecDoubleVector_Reverse__SWIG_1(swigCPtr, index, count);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRange(int index, VecDoubleVector values) {
    aidi_vision_clientPINVOKE.VecDoubleVector_SetRange(swigCPtr, index, VecDoubleVector.getCPtr(values));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace aqrose.aidi_vision_client {

public class VecIntVector : global::System.IDisposable, global::System.Collections.IEnumerable
    , global::System.Collections.Generic.IEnumerable<IntVector>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal VecIntVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(VecIntVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~VecIntVector() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_VecIntVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public VecIntVector(global::System.Collections.ICollection c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (IntVector element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public IntVector this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)capacity();
    }
    set {
      if (value < size())
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      reserve((uint)value);
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(IntVector[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(IntVector[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, IntVector[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  global::System.Collections.Generic.IEnumerator<IntVector> global::System.Collections.Generic.IEnumerable<IntVector>.GetEnumerator() {
    return new VecIntVectorEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new VecIntVectorEnumerator(this);
  }

  public VecIntVectorEnumerator GetEnumerator() {
    return new VecIntVectorEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class VecIntVectorEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<IntVector>
  {
    private VecIntVector collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public VecIntVectorEnumerator(VecIntVector collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public IntVector Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (IntVector)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public void Clear() {
    aidi_vision_clientPINVOKE.VecIntVector_Clear(swigCPtr);
  }

  public void Add(IntVector x) {
    aidi_vision_clientPINVOKE.VecIntVector_Add(swigCPtr, IntVector.getCPtr(x));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = aidi_vision_clientPINVOKE.VecIntVector_size(swigCPtr);
    return ret;
  }

  private uint capacity() {
    uint ret = aidi_vision_clientPINVOKE.VecIntVector_capacity(swigCPtr);
    return ret;
  }

  private void reserve(uint n) {
    aidi_vision_clientPINVOKE.VecIntVector_reserve(swigCPtr, n);
  }

  public VecIntVector() : this(aidi_vision_clientPINVOKE.new_VecIntVector__SWIG_0(), true) {
  }

  public VecIntVector(VecIntVector other) : this(aidi_vision_clientPINVOKE.new_VecIntVector__SWIG_1(VecIntVector.getCPtr(other)), true) {
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public VecIntVector(int capacity) : this(aidi_vision_clientPINVOKE.new_VecIntVector__SWIG_2(capacity), true) {
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  private IntVector getitemcopy(int index) {
    IntVector ret = new IntVector(aidi_vision_clientPINVOKE.VecIntVector_getitemcopy(swigCPtr, index), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private IntVector getitem(int index) {
    IntVector ret = new IntVector(aidi_vision_clientPINVOKE.VecIntVector_getitem(swigCPtr, index), false);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, IntVector val) {
    aidi_vision_clientPINVOKE.VecIntVector_setitem(swigCPtr, index, IntVector.getCPtr(val));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRange(VecIntVector values) {
    aidi_vision_clientPINVOKE.VecIntVector_AddRange(swigCPtr, VecIntVector.getCPtr(values));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public VecIntVector GetRange(int index, int count) {
    global::System.IntPtr cPtr = aidi_vision_clientPINVOKE.VecIntVector_GetRange(swigCPtr, index, count);
    VecIntVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new VecIntVector(cPtr, true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Insert(int index, IntVector x) {
    aidi_vision_clientPINVOKE.VecIntVector_Insert(swigCPtr, index, IntVector.getCPtr(x));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertRange(int index, VecIntVector values) {
    aidi_vision_clientPINVOKE.VecIntVector_InsertRange(swigCPtr, index, VecIntVector.getCPtr(values));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    aidi_vision_clientPINVOKE.VecIntVector_RemoveAt(swigCPtr, index);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRange(int index, int count) {
    aidi_vision_clientPINVOKE.VecIntVector_RemoveRange(swigCPtr, index, count);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VecIntVector Repeat(IntVector value, int count) {
    global::System.IntPtr cPtr = aidi_vision_clientPINVOKE.VecIntVector_Repeat(IntVector.getCPtr(value), count);
    VecIntVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new VecIntVector(cPtr, true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reverse() {
    aidi_vision_clientPINVOKE.VecIntVector_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    aidi_vision_clientPINVOKE.VecIntVector_Reverse__SWIG_1(swigCPtr, index, count);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRange(int index, VecIntVector values) {
    aidi_vision_clientPINVOKE.VecIntVector_SetRange(swigCPtr, index, VecIntVector.getCPtr(values));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace aqrose.aidi_vision_client {

public class VecStringVector : global::System.IDisposable, global::System.Collections.IEnumerable
    , global::System.Collections.Generic.IEnumerable<StringVector>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal VecStringVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(VecStringVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~VecStringVector() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_VecStringVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public VecStringVector(global::System.Collections.ICollection c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (StringVector element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public StringVector this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)capacity();
    }
    set {
      if (value < size())
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      reserve((uint)value);
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(StringVector[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(StringVector[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, StringVector[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  global::System.Collections.Generic.IEnumerator<StringVector> global::System.Collections.Generic.IEnumerable<StringVector>.GetEnumerator() {
    return new VecStringVectorEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new VecStringVectorEnumerator(this);
  }

  public VecStringVectorEnumerator GetEnumerator() {
    return new VecStringVectorEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class VecStringVectorEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<StringVector>
  {
    private VecStringVector collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public VecStringVectorEnumerator(VecStringVector collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public StringVector Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (StringVector)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public void Clear() {
    aidi_vision_clientPINVOKE.VecStringVector_Clear(swigCPtr);
  }

  public void Add(StringVector x) {
    aidi_vision_clientPINVOKE.VecStringVector_Add(swigCPtr, StringVector.getCPtr(x));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = aidi_vision_clientPINVOKE.VecStringVector_size(swigCPtr);
    return ret;
  }

  private uint capacity() {
    uint ret = aidi_vision_clientPINVOKE.VecStringVector_capacity(swigCPtr);
    return ret;
  }

  private void reserve(uint n) {
    aidi_vision_clientPINVOKE.VecStringVector_reserve(swigCPtr, n);
  }

  public VecStringVector() : this(aidi_vision_clientPINVOKE.new_VecStringVector__SWIG_0(), true) {
  }

  public VecStringVector(VecStringVector other) : this(aidi_vision_clientPINVOKE.new_VecStringVector__SWIG_1(VecStringVector.getCPtr(other)), true) {
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public VecStringVector(int capacity) : this(aidi_vision_clientPINVOKE.new_VecStringVector__SWIG_2(capacity), true) {
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  private StringVector getitemcopy(int index) {
    StringVector ret = new StringVector(aidi_vision_clientPINVOKE.VecStringVector_getitemcopy(swigCPtr, index), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private StringVector getitem(int index) {
    StringVector ret = new StringVector(aidi_vision_clientPINVOKE.VecStringVector_getitem(swigCPtr, index), false);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, StringVector val) {
    aidi_vision_clientPINVOKE.VecStringVector_setitem(swigCPtr, index, StringVector.getCPtr(val));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRange(VecStringVector values) {
    aidi_vision_clientPINVOKE.VecStringVector_AddRange(swigCPtr, VecStringVector.getCPtr(values));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public VecStringVector GetRange(int index, int count) {
    global::System.IntPtr cPtr = aidi_vision_clientPINVOKE.VecStringVector_GetRange(swigCPtr, index, count);
    VecStringVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new VecStringVector(cPtr, true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Insert(int index, StringVector x) {
    aidi_vision_clientPINVOKE.VecStringVector_Insert(swigCPtr, index, StringVector.getCPtr(x));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertRange(int index, VecStringVector values) {
    aidi_vision_clientPINVOKE.VecStringVector_InsertRange(swigCPtr, index, VecStringVector.getCPtr(values));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    aidi_vision_clientPINVOKE.VecStringVector_RemoveAt(swigCPtr, index);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRange(int index, int count) {
    aidi_vision_clientPINVOKE.VecStringVector_RemoveRange(swigCPtr, index, count);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VecStringVector Repeat(StringVector value, int count) {
    global::System.IntPtr cPtr = aidi_vision_clientPINVOKE.VecStringVector_Repeat(StringVector.getCPtr(value), count);
    VecStringVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new VecStringVector(cPtr, true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reverse() {
    aidi_vision_clientPINVOKE.VecStringVector_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    aidi_vision_clientPINVOKE.VecStringVector_Reverse__SWIG_1(swigCPtr, index, count);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRange(int index, VecStringVector values) {
    aidi_vision_clientPINVOKE.VecStringVector_SetRange(swigCPtr, index, VecStringVector.getCPtr(values));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace aqrose.aidi_vision_client {

public class StringIntMap : global::System.IDisposable 
    , global::System.Collections.Generic.IDictionary<string, int>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal StringIntMap(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(StringIntMap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~StringIntMap() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_StringIntMap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }


  public int this[string key] {
    get {
      return getitem(key);
    }

    set {
      setitem(key, value);
    }
  }

  public bool TryGetValue(string key, out int value) {
    if (this.ContainsKey(key)) {
      value = this[key];
      return true;
    }
    value = default(int);
    return false;
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsReadOnly {
    get { 
      return false; 
    }
  }

  public global::System.Collections.Generic.ICollection<string> Keys {
    get {
      global::System.Collections.Generic.ICollection<string> keys = new global::System.Collections.Generic.List<string>();
      int size = this.Count;
      if (size > 0) {
        global::System.IntPtr iter = create_iterator_begin();
        for (int i = 0; i < size; i++) {
          keys.Add(get_next_key(iter));
        }
        destroy_iterator(iter);
      }
      return keys;
    }
  }

  public global::System.Collections.Generic.ICollection<int> Values {
    get {
      global::System.Collections.Generic.ICollection<int> vals = new global::System.Collections.Generic.List<int>();
      foreach (global::System.Collections.Generic.KeyValuePair<string, int> pair in this) {
        vals.Add(pair.Value);
      }
      return vals;
    }
  }
  
  public void Add(global::System.Collections.Generic.KeyValuePair<string, int> item) {
    Add(item.Key, item.Value);
  }

  public bool Remove(global::System.Collections.Generic.KeyValuePair<string, int> item) {
    if (Contains(item)) {
      return Remove(item.Key);
    } else {
      return false;
    }
  }

  public bool Contains(global::System.Collections.Generic.KeyValuePair<string, int> item) {
    if (this[item.Key] == item.Value) {
      return true;
    } else {
      return false;
    }
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<string, int>[] array) {
    CopyTo(array, 0);
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<string, int>[] array, int arrayIndex) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (arrayIndex+this.Count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");

    global::System.Collections.Generic.IList<string> keyList = new global::System.Collections.Generic.List<string>(this.Keys);
    for (int i = 0; i < keyList.Count; i++) {
      string currentKey = keyList[i];
      array.SetValue(new global::System.Collections.Generic.KeyValuePair<string, int>(currentKey, this[currentKey]), arrayIndex+i);
    }
  }

  global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<string, int>> global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, int>>.GetEnumerator() {
    return new StringIntMapEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new StringIntMapEnumerator(this);
  }

  public StringIntMapEnumerator GetEnumerator() {
    return new StringIntMapEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class StringIntMapEnumerator : global::System.Collections.IEnumerator, 
      global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<string, int>>
  {
    private StringIntMap collectionRef;
    private global::System.Collections.Generic.IList<string> keyCollection;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public StringIntMapEnumerator(StringIntMap collection) {
      collectionRef = collection;
      keyCollection = new global::System.Collections.Generic.List<string>(collection.Keys);
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public global::System.Collections.Generic.KeyValuePair<string, int> Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (global::System.Collections.Generic.KeyValuePair<string, int>)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        string currentKey = keyCollection[currentIndex];
        currentObject = new global::System.Collections.Generic.KeyValuePair<string, int>(currentKey, collectionRef[currentKey]);
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }
  

  public StringIntMap() : this(aidi_vision_clientPINVOKE.new_StringIntMap__SWIG_0(), true) {
  }

  public StringIntMap(StringIntMap other) : this(aidi_vision_clientPINVOKE.new_StringIntMap__SWIG_1(StringIntMap.getCPtr(other)), true) {
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = aidi_vision_clientPINVOKE.StringIntMap_size(swigCPtr);
    return ret;
  }

  public bool empty() {
    bool ret = aidi_vision_clientPINVOKE.StringIntMap_empty(swigCPtr);
    return ret;
  }

  public void Clear() {
    aidi_vision_clientPINVOKE.StringIntMap_Clear(swigCPtr);
  }

  private int getitem(string key) {
    int ret = aidi_vision_clientPINVOKE.StringIntMap_getitem(swigCPtr, key);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(string key, int x) {
    aidi_vision_clientPINVOKE.StringIntMap_setitem(swigCPtr, key, x);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool ContainsKey(string key) {
    bool ret = aidi_vision_clientPINVOKE.StringIntMap_ContainsKey(swigCPtr, key);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Add(string key, int val) {
    aidi_vision_clientPINVOKE.StringIntMap_Add(swigCPtr, key, val);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Remove(string key) {
    bool ret = aidi_vision_clientPINVOKE.StringIntMap_Remove(swigCPtr, key);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private global::System.IntPtr create_iterator_begin() {
    global::System.IntPtr ret = aidi_vision_clientPINVOKE.StringIntMap_create_iterator_begin(swigCPtr);
    return ret;
  }

  private string get_next_key(global::System.IntPtr swigiterator) {
    string ret = aidi_vision_clientPINVOKE.StringIntMap_get_next_key(swigCPtr, swigiterator);
    return ret;
  }

  private void destroy_iterator(global::System.IntPtr swigiterator) {
    aidi_vision_clientPINVOKE.StringIntMap_destroy_iterator(swigCPtr, swigiterator);
  }

}

}
namespace aqrose.aidi_vision_client {

public class StringFloatMap : global::System.IDisposable 
    , global::System.Collections.Generic.IDictionary<string, float>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal StringFloatMap(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(StringFloatMap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~StringFloatMap() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_StringFloatMap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }


  public float this[string key] {
    get {
      return getitem(key);
    }

    set {
      setitem(key, value);
    }
  }

  public bool TryGetValue(string key, out float value) {
    if (this.ContainsKey(key)) {
      value = this[key];
      return true;
    }
    value = default(float);
    return false;
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsReadOnly {
    get { 
      return false; 
    }
  }

  public global::System.Collections.Generic.ICollection<string> Keys {
    get {
      global::System.Collections.Generic.ICollection<string> keys = new global::System.Collections.Generic.List<string>();
      int size = this.Count;
      if (size > 0) {
        global::System.IntPtr iter = create_iterator_begin();
        for (int i = 0; i < size; i++) {
          keys.Add(get_next_key(iter));
        }
        destroy_iterator(iter);
      }
      return keys;
    }
  }

  public global::System.Collections.Generic.ICollection<float> Values {
    get {
      global::System.Collections.Generic.ICollection<float> vals = new global::System.Collections.Generic.List<float>();
      foreach (global::System.Collections.Generic.KeyValuePair<string, float> pair in this) {
        vals.Add(pair.Value);
      }
      return vals;
    }
  }
  
  public void Add(global::System.Collections.Generic.KeyValuePair<string, float> item) {
    Add(item.Key, item.Value);
  }

  public bool Remove(global::System.Collections.Generic.KeyValuePair<string, float> item) {
    if (Contains(item)) {
      return Remove(item.Key);
    } else {
      return false;
    }
  }

  public bool Contains(global::System.Collections.Generic.KeyValuePair<string, float> item) {
    if (this[item.Key] == item.Value) {
      return true;
    } else {
      return false;
    }
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<string, float>[] array) {
    CopyTo(array, 0);
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<string, float>[] array, int arrayIndex) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (arrayIndex+this.Count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");

    global::System.Collections.Generic.IList<string> keyList = new global::System.Collections.Generic.List<string>(this.Keys);
    for (int i = 0; i < keyList.Count; i++) {
      string currentKey = keyList[i];
      array.SetValue(new global::System.Collections.Generic.KeyValuePair<string, float>(currentKey, this[currentKey]), arrayIndex+i);
    }
  }

  global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<string, float>> global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, float>>.GetEnumerator() {
    return new StringFloatMapEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new StringFloatMapEnumerator(this);
  }

  public StringFloatMapEnumerator GetEnumerator() {
    return new StringFloatMapEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class StringFloatMapEnumerator : global::System.Collections.IEnumerator, 
      global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<string, float>>
  {
    private StringFloatMap collectionRef;
    private global::System.Collections.Generic.IList<string> keyCollection;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public StringFloatMapEnumerator(StringFloatMap collection) {
      collectionRef = collection;
      keyCollection = new global::System.Collections.Generic.List<string>(collection.Keys);
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public global::System.Collections.Generic.KeyValuePair<string, float> Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (global::System.Collections.Generic.KeyValuePair<string, float>)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        string currentKey = keyCollection[currentIndex];
        currentObject = new global::System.Collections.Generic.KeyValuePair<string, float>(currentKey, collectionRef[currentKey]);
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }
  

  public StringFloatMap() : this(aidi_vision_clientPINVOKE.new_StringFloatMap__SWIG_0(), true) {
  }

  public StringFloatMap(StringFloatMap other) : this(aidi_vision_clientPINVOKE.new_StringFloatMap__SWIG_1(StringFloatMap.getCPtr(other)), true) {
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = aidi_vision_clientPINVOKE.StringFloatMap_size(swigCPtr);
    return ret;
  }

  public bool empty() {
    bool ret = aidi_vision_clientPINVOKE.StringFloatMap_empty(swigCPtr);
    return ret;
  }

  public void Clear() {
    aidi_vision_clientPINVOKE.StringFloatMap_Clear(swigCPtr);
  }

  private float getitem(string key) {
    float ret = aidi_vision_clientPINVOKE.StringFloatMap_getitem(swigCPtr, key);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(string key, float x) {
    aidi_vision_clientPINVOKE.StringFloatMap_setitem(swigCPtr, key, x);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool ContainsKey(string key) {
    bool ret = aidi_vision_clientPINVOKE.StringFloatMap_ContainsKey(swigCPtr, key);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Add(string key, float val) {
    aidi_vision_clientPINVOKE.StringFloatMap_Add(swigCPtr, key, val);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Remove(string key) {
    bool ret = aidi_vision_clientPINVOKE.StringFloatMap_Remove(swigCPtr, key);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private global::System.IntPtr create_iterator_begin() {
    global::System.IntPtr ret = aidi_vision_clientPINVOKE.StringFloatMap_create_iterator_begin(swigCPtr);
    return ret;
  }

  private string get_next_key(global::System.IntPtr swigiterator) {
    string ret = aidi_vision_clientPINVOKE.StringFloatMap_get_next_key(swigCPtr, swigiterator);
    return ret;
  }

  private void destroy_iterator(global::System.IntPtr swigiterator) {
    aidi_vision_clientPINVOKE.StringFloatMap_destroy_iterator(swigCPtr, swigiterator);
  }

}

}
namespace aqrose.aidi_vision_client {

public class AidiImage : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AidiImage(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AidiImage obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AidiImage() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_AidiImage(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public AidiImage() : this(aidi_vision_clientPINVOKE.new_AidiImage__SWIG_0(), true) {
  }

  public AidiImage(SWIGTYPE_p_cv__Mat mat) : this(aidi_vision_clientPINVOKE.new_AidiImage__SWIG_1(SWIGTYPE_p_cv__Mat.getCPtr(mat)), true) {
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public AidiImage(int rows, int cols, int type) : this(aidi_vision_clientPINVOKE.new_AidiImage__SWIG_2(rows, cols, type), true) {
  }

  public AidiImage(int rows, int cols, int type, string data, uint step) : this(aidi_vision_clientPINVOKE.new_AidiImage__SWIG_3(rows, cols, type, data, step), true) {
  }

  public void from_mat(SWIGTYPE_p_cv__Mat mat) {
    aidi_vision_clientPINVOKE.AidiImage_from_mat(swigCPtr, SWIGTYPE_p_cv__Mat.getCPtr(mat));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_cv__Mat to_mat() {
    SWIGTYPE_p_cv__Mat ret = new SWIGTYPE_p_cv__Mat(aidi_vision_clientPINVOKE.AidiImage_to_mat(swigCPtr), false);
    return ret;
  }

  public void from_file(string path, int flag) {
    aidi_vision_clientPINVOKE.AidiImage_from_file__SWIG_0(swigCPtr, path, flag);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void from_file(string path) {
    aidi_vision_clientPINVOKE.AidiImage_from_file__SWIG_1(swigCPtr, path);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool to_file(string path) {
    bool ret = aidi_vision_clientPINVOKE.AidiImage_to_file__SWIG_0(swigCPtr, path);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void decode(string data, int flag) {
    aidi_vision_clientPINVOKE.AidiImage_decode__SWIG_0(swigCPtr, data, flag);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void decode(string data) {
    aidi_vision_clientPINVOKE.AidiImage_decode__SWIG_1(swigCPtr, data);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public string encode(string format) {
    string ret = aidi_vision_clientPINVOKE.AidiImage_encode(swigCPtr, format);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void show(int wait_time, string winname) {
    aidi_vision_clientPINVOKE.AidiImage_show__SWIG_0(swigCPtr, wait_time, winname);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void show(int wait_time) {
    aidi_vision_clientPINVOKE.AidiImage_show__SWIG_1(swigCPtr, wait_time);
  }

  public void from_chars(byte[] inbuf, int height, int width, int channels) {
    aidi_vision_clientPINVOKE.AidiImage_from_chars(swigCPtr, inbuf, height, width, channels);
  }

  public void to_chars(byte[] outbuf, uint len) {
    aidi_vision_clientPINVOKE.AidiImage_to_chars(swigCPtr, outbuf, len);
  }

  public void from_IntVector(IntVector data, int height, int width, int channels) {
    aidi_vision_clientPINVOKE.AidiImage_from_IntVector__SWIG_0(swigCPtr, IntVector.getCPtr(data), height, width, channels);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void from_IntVector(IntVector data, int height, int width) {
    aidi_vision_clientPINVOKE.AidiImage_from_IntVector__SWIG_1(swigCPtr, IntVector.getCPtr(data), height, width);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public IntVector to_IntVector() {
    IntVector ret = new IntVector(aidi_vision_clientPINVOKE.AidiImage_to_IntVector(swigCPtr), true);
    return ret;
  }

  public void from_FloatVector(FloatVector data, int height, int width, int channels) {
    aidi_vision_clientPINVOKE.AidiImage_from_FloatVector__SWIG_0(swigCPtr, FloatVector.getCPtr(data), height, width, channels);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void from_FloatVector(FloatVector data, int height, int width) {
    aidi_vision_clientPINVOKE.AidiImage_from_FloatVector__SWIG_1(swigCPtr, FloatVector.getCPtr(data), height, width);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public FloatVector to_FloatVector() {
    FloatVector ret = new FloatVector(aidi_vision_clientPINVOKE.AidiImage_to_FloatVector(swigCPtr), true);
    return ret;
  }

  public void from_string(SWIGTYPE_p_std__string data, int rows, int cols, int channels) {
    aidi_vision_clientPINVOKE.AidiImage_from_string__SWIG_0(swigCPtr, SWIGTYPE_p_std__string.getCPtr(data), rows, cols, channels);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void from_string(SWIGTYPE_p_std__string data, int rows, int cols) {
    aidi_vision_clientPINVOKE.AidiImage_from_string__SWIG_1(swigCPtr, SWIGTYPE_p_std__string.getCPtr(data), rows, cols);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public string to_string() {
    string ret = aidi_vision_clientPINVOKE.AidiImage_to_string(swigCPtr);
    return ret;
  }

  public bool draw_result(string result) {
    bool ret = aidi_vision_clientPINVOKE.AidiImage_draw_result__SWIG_0(swigCPtr, result);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool empty() {
    bool ret = aidi_vision_clientPINVOKE.AidiImage_empty(swigCPtr);
    return ret;
  }

  public int data_size() {
    int ret = aidi_vision_clientPINVOKE.AidiImage_data_size(swigCPtr);
    return ret;
  }

  public int data_byte_size() {
    int ret = aidi_vision_clientPINVOKE.AidiImage_data_byte_size(swigCPtr);
    return ret;
  }

  public int height() {
    int ret = aidi_vision_clientPINVOKE.AidiImage_height(swigCPtr);
    return ret;
  }

  public int width() {
    int ret = aidi_vision_clientPINVOKE.AidiImage_width(swigCPtr);
    return ret;
  }

  public int channels() {
    int ret = aidi_vision_clientPINVOKE.AidiImage_channels(swigCPtr);
    return ret;
  }

  public void release() {
    aidi_vision_clientPINVOKE.AidiImage_release(swigCPtr);
  }

  public void get_mat(SWIGTYPE_p_cv__Mat image) {
    aidi_vision_clientPINVOKE.AidiImage_get_mat(swigCPtr, SWIGTYPE_p_cv__Mat.getCPtr(image));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_cv__Mat get_mat_const() {
    SWIGTYPE_p_cv__Mat ret = new SWIGTYPE_p_cv__Mat(aidi_vision_clientPINVOKE.AidiImage_get_mat_const(swigCPtr), false);
    return ret;
  }

  public void set_mat(SWIGTYPE_p_cv__Mat image) {
    aidi_vision_clientPINVOKE.AidiImage_set_mat(swigCPtr, SWIGTYPE_p_cv__Mat.getCPtr(image));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public int channel() {
    int ret = aidi_vision_clientPINVOKE.AidiImage_channel(swigCPtr);
    return ret;
  }

  public void mat_to_char_ptr(byte[] outbuf, uint len) {
    aidi_vision_clientPINVOKE.AidiImage_mat_to_char_ptr(swigCPtr, outbuf, len);
  }

  public void char_ptr_to_mat(byte[] inbuf, int height, int width, int channel) {
    aidi_vision_clientPINVOKE.AidiImage_char_ptr_to_mat(swigCPtr, inbuf, height, width, channel);
  }

  public void vector_int_to_mat(IntVector data, int rows, int cols) {
    aidi_vision_clientPINVOKE.AidiImage_vector_int_to_mat(swigCPtr, IntVector.getCPtr(data), rows, cols);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void vector_float_to_mat(FloatVector data, int rows, int cols) {
    aidi_vision_clientPINVOKE.AidiImage_vector_float_to_mat(swigCPtr, FloatVector.getCPtr(data), rows, cols);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void mat_to_vector_int(IntVector data) {
    aidi_vision_clientPINVOKE.AidiImage_mat_to_vector_int(swigCPtr, IntVector.getCPtr(data));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void mat_to_vector_float(FloatVector data) {
    aidi_vision_clientPINVOKE.AidiImage_mat_to_vector_float(swigCPtr, FloatVector.getCPtr(data));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void read_image(string path, int flag) {
    aidi_vision_clientPINVOKE.AidiImage_read_image__SWIG_0(swigCPtr, path, flag);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void read_image(string path) {
    aidi_vision_clientPINVOKE.AidiImage_read_image__SWIG_1(swigCPtr, path);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void save_image(string path) {
    aidi_vision_clientPINVOKE.AidiImage_save_image(swigCPtr, path);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void show_image(int wait_time) {
    aidi_vision_clientPINVOKE.AidiImage_show_image(swigCPtr, wait_time);
  }

}

}
namespace aqrose.aidi_vision_client {

public class BatchAidiImage : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BatchAidiImage(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BatchAidiImage obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~BatchAidiImage() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_BatchAidiImage(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public BatchAidiImage() : this(aidi_vision_clientPINVOKE.new_BatchAidiImage(), true) {
  }

  public void add_image(AidiImage image) {
    aidi_vision_clientPINVOKE.BatchAidiImage_add_image__SWIG_0(swigCPtr, AidiImage.getCPtr(image));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_image(string image_path) {
    aidi_vision_clientPINVOKE.BatchAidiImage_add_image__SWIG_1(swigCPtr, image_path);
  }

  public void add_image(byte[] inbuf, int height, int width, int channels) {
    aidi_vision_clientPINVOKE.BatchAidiImage_add_image__SWIG_2(swigCPtr, inbuf, height, width, channels);
  }

  public void clear_images() {
    aidi_vision_clientPINVOKE.BatchAidiImage_clear_images(swigCPtr);
  }

  public void show_all_images(int wait_time) {
    aidi_vision_clientPINVOKE.BatchAidiImage_show_all_images(swigCPtr, wait_time);
  }

  public int get_images_size() {
    int ret = aidi_vision_clientPINVOKE.BatchAidiImage_get_images_size(swigCPtr);
    return ret;
  }

  public void get_all_images(SWIGTYPE_p_std__vectorT_cv__Mat_t all_images) {
    aidi_vision_clientPINVOKE.BatchAidiImage_get_all_images(swigCPtr, SWIGTYPE_p_std__vectorT_cv__Mat_t.getCPtr(all_images));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_image_list(SWIGTYPE_p_std__vectorT_cv__Mat_t images) {
    aidi_vision_clientPINVOKE.BatchAidiImage_set_image_list(swigCPtr, SWIGTYPE_p_std__vectorT_cv__Mat_t.getCPtr(images));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public AidiImage at(int index) {
    AidiImage ret = new AidiImage(aidi_vision_clientPINVOKE.BatchAidiImage_at(swigCPtr, index), true);
    return ret;
  }

}

}
namespace aqrose.aidi_vision_client {

public class FactoryClientParamWrapper : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FactoryClientParamWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FactoryClientParamWrapper obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FactoryClientParamWrapper() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_FactoryClientParamWrapper(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public StringVector save_model_path_list {
    set {
      aidi_vision_clientPINVOKE.FactoryClientParamWrapper_save_model_path_list_set(swigCPtr, StringVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = aidi_vision_clientPINVOKE.FactoryClientParamWrapper_save_model_path_list_get(swigCPtr);
      StringVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new StringVector(cPtr, false);
      return ret;
    } 
  }

  public StringVector operator_name_list {
    set {
      aidi_vision_clientPINVOKE.FactoryClientParamWrapper_operator_name_list_set(swigCPtr, StringVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = aidi_vision_clientPINVOKE.FactoryClientParamWrapper_operator_name_list_get(swigCPtr);
      StringVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new StringVector(cPtr, false);
      return ret;
    } 
  }

  public StringVector operator_type_list {
    set {
      aidi_vision_clientPINVOKE.FactoryClientParamWrapper_operator_type_list_set(swigCPtr, StringVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = aidi_vision_clientPINVOKE.FactoryClientParamWrapper_operator_type_list_get(swigCPtr);
      StringVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new StringVector(cPtr, false);
      return ret;
    } 
  }

  public int device_number {
    set {
      aidi_vision_clientPINVOKE.FactoryClientParamWrapper_device_number_set(swigCPtr, value);
    } 
    get {
      int ret = aidi_vision_clientPINVOKE.FactoryClientParamWrapper_device_number_get(swigCPtr);
      return ret;
    } 
  }

  public bool use_gpu {
    set {
      aidi_vision_clientPINVOKE.FactoryClientParamWrapper_use_gpu_set(swigCPtr, value);
    } 
    get {
      bool ret = aidi_vision_clientPINVOKE.FactoryClientParamWrapper_use_gpu_get(swigCPtr);
      return ret;
    } 
  }

  public bool use_runtime {
    set {
      aidi_vision_clientPINVOKE.FactoryClientParamWrapper_use_runtime_set(swigCPtr, value);
    } 
    get {
      bool ret = aidi_vision_clientPINVOKE.FactoryClientParamWrapper_use_runtime_get(swigCPtr);
      return ret;
    } 
  }

  public FactoryClientParamWrapper() : this(aidi_vision_clientPINVOKE.new_FactoryClientParamWrapper(), true) {
  }

}

}
namespace aqrose.aidi_vision_client {

public class ClassifyClientParamWrapper : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ClassifyClientParamWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ClassifyClientParamWrapper obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ClassifyClientParamWrapper() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_ClassifyClientParamWrapper(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public int batch_size {
    set {
      aidi_vision_clientPINVOKE.ClassifyClientParamWrapper_batch_size_set(swigCPtr, value);
    } 
    get {
      int ret = aidi_vision_clientPINVOKE.ClassifyClientParamWrapper_batch_size_get(swigCPtr);
      return ret;
    } 
  }

  public bool use_gpu {
    set {
      aidi_vision_clientPINVOKE.ClassifyClientParamWrapper_use_gpu_set(swigCPtr, value);
    } 
    get {
      bool ret = aidi_vision_clientPINVOKE.ClassifyClientParamWrapper_use_gpu_get(swigCPtr);
      return ret;
    } 
  }

  public int device_number {
    set {
      aidi_vision_clientPINVOKE.ClassifyClientParamWrapper_device_number_set(swigCPtr, value);
    } 
    get {
      int ret = aidi_vision_clientPINVOKE.ClassifyClientParamWrapper_device_number_get(swigCPtr);
      return ret;
    } 
  }

  public string save_model_path {
    set {
      aidi_vision_clientPINVOKE.ClassifyClientParamWrapper_save_model_path_set(swigCPtr, value);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = aidi_vision_clientPINVOKE.ClassifyClientParamWrapper_save_model_path_get(swigCPtr);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool use_runtime {
    set {
      aidi_vision_clientPINVOKE.ClassifyClientParamWrapper_use_runtime_set(swigCPtr, value);
    } 
    get {
      bool ret = aidi_vision_clientPINVOKE.ClassifyClientParamWrapper_use_runtime_get(swigCPtr);
      return ret;
    } 
  }

  public bool encrypt {
    set {
      aidi_vision_clientPINVOKE.ClassifyClientParamWrapper_encrypt_set(swigCPtr, value);
    } 
    get {
      bool ret = aidi_vision_clientPINVOKE.ClassifyClientParamWrapper_encrypt_get(swigCPtr);
      return ret;
    } 
  }

  public string model_path {
    set {
      aidi_vision_clientPINVOKE.ClassifyClientParamWrapper_model_path_set(swigCPtr, value);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = aidi_vision_clientPINVOKE.ClassifyClientParamWrapper_model_path_get(swigCPtr);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool force_set_gpu {
    set {
      aidi_vision_clientPINVOKE.ClassifyClientParamWrapper_force_set_gpu_set(swigCPtr, value);
    } 
    get {
      bool ret = aidi_vision_clientPINVOKE.ClassifyClientParamWrapper_force_set_gpu_get(swigCPtr);
      return ret;
    } 
  }

  public ClassifyClientParamWrapper() : this(aidi_vision_clientPINVOKE.new_ClassifyClientParamWrapper(), true) {
  }

}

}
namespace aqrose.aidi_vision_client {

public class LocationClientParamWrapper : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LocationClientParamWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LocationClientParamWrapper obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~LocationClientParamWrapper() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_LocationClientParamWrapper(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public string model_path {
    set {
      aidi_vision_clientPINVOKE.LocationClientParamWrapper_model_path_set(swigCPtr, value);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = aidi_vision_clientPINVOKE.LocationClientParamWrapper_model_path_get(swigCPtr);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string deploy {
    set {
      aidi_vision_clientPINVOKE.LocationClientParamWrapper_deploy_set(swigCPtr, value);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = aidi_vision_clientPINVOKE.LocationClientParamWrapper_deploy_get(swigCPtr);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string save_model_path {
    set {
      aidi_vision_clientPINVOKE.LocationClientParamWrapper_save_model_path_set(swigCPtr, value);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = aidi_vision_clientPINVOKE.LocationClientParamWrapper_save_model_path_get(swigCPtr);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool save_model_path_defined {
    set {
      aidi_vision_clientPINVOKE.LocationClientParamWrapper_save_model_path_defined_set(swigCPtr, value);
    } 
    get {
      bool ret = aidi_vision_clientPINVOKE.LocationClientParamWrapper_save_model_path_defined_get(swigCPtr);
      return ret;
    } 
  }

  public int test_input_shape_w {
    set {
      aidi_vision_clientPINVOKE.LocationClientParamWrapper_test_input_shape_w_set(swigCPtr, value);
    } 
    get {
      int ret = aidi_vision_clientPINVOKE.LocationClientParamWrapper_test_input_shape_w_get(swigCPtr);
      return ret;
    } 
  }

  public int test_input_shape_h {
    set {
      aidi_vision_clientPINVOKE.LocationClientParamWrapper_test_input_shape_h_set(swigCPtr, value);
    } 
    get {
      int ret = aidi_vision_clientPINVOKE.LocationClientParamWrapper_test_input_shape_h_get(swigCPtr);
      return ret;
    } 
  }

  public int test_input_shape_c {
    set {
      aidi_vision_clientPINVOKE.LocationClientParamWrapper_test_input_shape_c_set(swigCPtr, value);
    } 
    get {
      int ret = aidi_vision_clientPINVOKE.LocationClientParamWrapper_test_input_shape_c_get(swigCPtr);
      return ret;
    } 
  }

  public int test_input_shape {
    set {
      aidi_vision_clientPINVOKE.LocationClientParamWrapper_test_input_shape_set(swigCPtr, value);
    } 
    get {
      int ret = aidi_vision_clientPINVOKE.LocationClientParamWrapper_test_input_shape_get(swigCPtr);
      return ret;
    } 
  }

  public int batch_size {
    set {
      aidi_vision_clientPINVOKE.LocationClientParamWrapper_batch_size_set(swigCPtr, value);
    } 
    get {
      int ret = aidi_vision_clientPINVOKE.LocationClientParamWrapper_batch_size_get(swigCPtr);
      return ret;
    } 
  }

  public bool use_gpu {
    set {
      aidi_vision_clientPINVOKE.LocationClientParamWrapper_use_gpu_set(swigCPtr, value);
    } 
    get {
      bool ret = aidi_vision_clientPINVOKE.LocationClientParamWrapper_use_gpu_get(swigCPtr);
      return ret;
    } 
  }

  public int device_number {
    set {
      aidi_vision_clientPINVOKE.LocationClientParamWrapper_device_number_set(swigCPtr, value);
    } 
    get {
      int ret = aidi_vision_clientPINVOKE.LocationClientParamWrapper_device_number_get(swigCPtr);
      return ret;
    } 
  }

  public bool test_model_initialized_ {
    set {
      aidi_vision_clientPINVOKE.LocationClientParamWrapper_test_model_initialized__set(swigCPtr, value);
    } 
    get {
      bool ret = aidi_vision_clientPINVOKE.LocationClientParamWrapper_test_model_initialized__get(swigCPtr);
      return ret;
    } 
  }

  public bool long_detection {
    set {
      aidi_vision_clientPINVOKE.LocationClientParamWrapper_long_detection_set(swigCPtr, value);
    } 
    get {
      bool ret = aidi_vision_clientPINVOKE.LocationClientParamWrapper_long_detection_get(swigCPtr);
      return ret;
    } 
  }

  public int split {
    set {
      aidi_vision_clientPINVOKE.LocationClientParamWrapper_split_set(swigCPtr, value);
    } 
    get {
      int ret = aidi_vision_clientPINVOKE.LocationClientParamWrapper_split_get(swigCPtr);
      return ret;
    } 
  }

  public int split_w {
    set {
      aidi_vision_clientPINVOKE.LocationClientParamWrapper_split_w_set(swigCPtr, value);
    } 
    get {
      int ret = aidi_vision_clientPINVOKE.LocationClientParamWrapper_split_w_get(swigCPtr);
      return ret;
    } 
  }

  public int split_h {
    set {
      aidi_vision_clientPINVOKE.LocationClientParamWrapper_split_h_set(swigCPtr, value);
    } 
    get {
      int ret = aidi_vision_clientPINVOKE.LocationClientParamWrapper_split_h_get(swigCPtr);
      return ret;
    } 
  }

  public bool encrypt {
    set {
      aidi_vision_clientPINVOKE.LocationClientParamWrapper_encrypt_set(swigCPtr, value);
    } 
    get {
      bool ret = aidi_vision_clientPINVOKE.LocationClientParamWrapper_encrypt_get(swigCPtr);
      return ret;
    } 
  }

  public bool use_runtime {
    set {
      aidi_vision_clientPINVOKE.LocationClientParamWrapper_use_runtime_set(swigCPtr, value);
    } 
    get {
      bool ret = aidi_vision_clientPINVOKE.LocationClientParamWrapper_use_runtime_get(swigCPtr);
      return ret;
    } 
  }

  public bool force_set_gpu {
    set {
      aidi_vision_clientPINVOKE.LocationClientParamWrapper_force_set_gpu_set(swigCPtr, value);
    } 
    get {
      bool ret = aidi_vision_clientPINVOKE.LocationClientParamWrapper_force_set_gpu_get(swigCPtr);
      return ret;
    } 
  }

  public LocationClientParamWrapper() : this(aidi_vision_clientPINVOKE.new_LocationClientParamWrapper(), true) {
  }

}

}
namespace aqrose.aidi_vision_client {

public class SegmentClientParamWrapper : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SegmentClientParamWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SegmentClientParamWrapper obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SegmentClientParamWrapper() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_SegmentClientParamWrapper(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public int device_number {
    set {
      aidi_vision_clientPINVOKE.SegmentClientParamWrapper_device_number_set(swigCPtr, value);
    } 
    get {
      int ret = aidi_vision_clientPINVOKE.SegmentClientParamWrapper_device_number_get(swigCPtr);
      return ret;
    } 
  }

  public bool use_gpu {
    set {
      aidi_vision_clientPINVOKE.SegmentClientParamWrapper_use_gpu_set(swigCPtr, value);
    } 
    get {
      bool ret = aidi_vision_clientPINVOKE.SegmentClientParamWrapper_use_gpu_get(swigCPtr);
      return ret;
    } 
  }

  public string save_model_path {
    set {
      aidi_vision_clientPINVOKE.SegmentClientParamWrapper_save_model_path_set(swigCPtr, value);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = aidi_vision_clientPINVOKE.SegmentClientParamWrapper_save_model_path_get(swigCPtr);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int batch_size {
    set {
      aidi_vision_clientPINVOKE.SegmentClientParamWrapper_batch_size_set(swigCPtr, value);
    } 
    get {
      int ret = aidi_vision_clientPINVOKE.SegmentClientParamWrapper_batch_size_get(swigCPtr);
      return ret;
    } 
  }

  public bool use_runtime {
    set {
      aidi_vision_clientPINVOKE.SegmentClientParamWrapper_use_runtime_set(swigCPtr, value);
    } 
    get {
      bool ret = aidi_vision_clientPINVOKE.SegmentClientParamWrapper_use_runtime_get(swigCPtr);
      return ret;
    } 
  }

  public bool encrypt {
    set {
      aidi_vision_clientPINVOKE.SegmentClientParamWrapper_encrypt_set(swigCPtr, value);
    } 
    get {
      bool ret = aidi_vision_clientPINVOKE.SegmentClientParamWrapper_encrypt_get(swigCPtr);
      return ret;
    } 
  }

  public string model_path {
    set {
      aidi_vision_clientPINVOKE.SegmentClientParamWrapper_model_path_set(swigCPtr, value);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = aidi_vision_clientPINVOKE.SegmentClientParamWrapper_model_path_get(swigCPtr);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool force_set_gpu {
    set {
      aidi_vision_clientPINVOKE.SegmentClientParamWrapper_force_set_gpu_set(swigCPtr, value);
    } 
    get {
      bool ret = aidi_vision_clientPINVOKE.SegmentClientParamWrapper_force_set_gpu_get(swigCPtr);
      return ret;
    } 
  }

  public SegmentClientParamWrapper() : this(aidi_vision_clientPINVOKE.new_SegmentClientParamWrapper(), true) {
  }

}

}
namespace aqrose.aidi_vision_client {

public class LocationResultWrapper : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LocationResultWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LocationResultWrapper obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~LocationResultWrapper() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_LocationResultWrapper(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public double precise {
    set {
      aidi_vision_clientPINVOKE.LocationResultWrapper_precise_set(swigCPtr, value);
    } 
    get {
      double ret = aidi_vision_clientPINVOKE.LocationResultWrapper_precise_get(swigCPtr);
      return ret;
    } 
  }

  public double recall {
    set {
      aidi_vision_clientPINVOKE.LocationResultWrapper_recall_set(swigCPtr, value);
    } 
    get {
      double ret = aidi_vision_clientPINVOKE.LocationResultWrapper_recall_get(swigCPtr);
      return ret;
    } 
  }

  public int all_gt_num {
    set {
      aidi_vision_clientPINVOKE.LocationResultWrapper_all_gt_num_set(swigCPtr, value);
    } 
    get {
      int ret = aidi_vision_clientPINVOKE.LocationResultWrapper_all_gt_num_get(swigCPtr);
      return ret;
    } 
  }

  public int all_pred_num {
    set {
      aidi_vision_clientPINVOKE.LocationResultWrapper_all_pred_num_set(swigCPtr, value);
    } 
    get {
      int ret = aidi_vision_clientPINVOKE.LocationResultWrapper_all_pred_num_get(swigCPtr);
      return ret;
    } 
  }

  public int recall_num {
    set {
      aidi_vision_clientPINVOKE.LocationResultWrapper_recall_num_set(swigCPtr, value);
    } 
    get {
      int ret = aidi_vision_clientPINVOKE.LocationResultWrapper_recall_num_get(swigCPtr);
      return ret;
    } 
  }

  public int precise_num {
    set {
      aidi_vision_clientPINVOKE.LocationResultWrapper_precise_num_set(swigCPtr, value);
    } 
    get {
      int ret = aidi_vision_clientPINVOKE.LocationResultWrapper_precise_num_get(swigCPtr);
      return ret;
    } 
  }

  public LocationResultWrapper() : this(aidi_vision_clientPINVOKE.new_LocationResultWrapper(), true) {
  }

}

}
namespace aqrose.aidi_vision_client {

public class SegmentResultWrapper : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SegmentResultWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SegmentResultWrapper obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SegmentResultWrapper() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_SegmentResultWrapper(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public double recall {
    set {
      aidi_vision_clientPINVOKE.SegmentResultWrapper_recall_set(swigCPtr, value);
    } 
    get {
      double ret = aidi_vision_clientPINVOKE.SegmentResultWrapper_recall_get(swigCPtr);
      return ret;
    } 
  }

  public double ap {
    set {
      aidi_vision_clientPINVOKE.SegmentResultWrapper_ap_set(swigCPtr, value);
    } 
    get {
      double ret = aidi_vision_clientPINVOKE.SegmentResultWrapper_ap_get(swigCPtr);
      return ret;
    } 
  }

  public double center_recall {
    set {
      aidi_vision_clientPINVOKE.SegmentResultWrapper_center_recall_set(swigCPtr, value);
    } 
    get {
      double ret = aidi_vision_clientPINVOKE.SegmentResultWrapper_center_recall_get(swigCPtr);
      return ret;
    } 
  }

  public double center_ap {
    set {
      aidi_vision_clientPINVOKE.SegmentResultWrapper_center_ap_set(swigCPtr, value);
    } 
    get {
      double ret = aidi_vision_clientPINVOKE.SegmentResultWrapper_center_ap_get(swigCPtr);
      return ret;
    } 
  }

  public long all_gt_num {
    set {
      aidi_vision_clientPINVOKE.SegmentResultWrapper_all_gt_num_set(swigCPtr, value);
    } 
    get {
      long ret = aidi_vision_clientPINVOKE.SegmentResultWrapper_all_gt_num_get(swigCPtr);
      return ret;
    } 
  }

  public long recall_num {
    set {
      aidi_vision_clientPINVOKE.SegmentResultWrapper_recall_num_set(swigCPtr, value);
    } 
    get {
      long ret = aidi_vision_clientPINVOKE.SegmentResultWrapper_recall_num_get(swigCPtr);
      return ret;
    } 
  }

  public long all_center_num {
    set {
      aidi_vision_clientPINVOKE.SegmentResultWrapper_all_center_num_set(swigCPtr, value);
    } 
    get {
      long ret = aidi_vision_clientPINVOKE.SegmentResultWrapper_all_center_num_get(swigCPtr);
      return ret;
    } 
  }

  public long center_recall_num {
    set {
      aidi_vision_clientPINVOKE.SegmentResultWrapper_center_recall_num_set(swigCPtr, value);
    } 
    get {
      long ret = aidi_vision_clientPINVOKE.SegmentResultWrapper_center_recall_num_get(swigCPtr);
      return ret;
    } 
  }

  public SegmentResultWrapper() : this(aidi_vision_clientPINVOKE.new_SegmentResultWrapper(), true) {
  }

}

}
namespace aqrose.aidi_vision_client {

public class ClassifyResultWrapper : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ClassifyResultWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ClassifyResultWrapper obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ClassifyResultWrapper() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_ClassifyResultWrapper(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public double acc {
    set {
      aidi_vision_clientPINVOKE.ClassifyResultWrapper_acc_set(swigCPtr, value);
    } 
    get {
      double ret = aidi_vision_clientPINVOKE.ClassifyResultWrapper_acc_get(swigCPtr);
      return ret;
    } 
  }

  public double recall {
    set {
      aidi_vision_clientPINVOKE.ClassifyResultWrapper_recall_set(swigCPtr, value);
    } 
    get {
      double ret = aidi_vision_clientPINVOKE.ClassifyResultWrapper_recall_get(swigCPtr);
      return ret;
    } 
  }

  public ClassifyResultWrapper() : this(aidi_vision_clientPINVOKE.new_ClassifyResultWrapper(), true) {
  }

}

}
namespace aqrose.aidi_vision_client {

public class FeatureLocationResultWrapper : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FeatureLocationResultWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FeatureLocationResultWrapper obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FeatureLocationResultWrapper() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_FeatureLocationResultWrapper(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public double ap {
    set {
      aidi_vision_clientPINVOKE.FeatureLocationResultWrapper_ap_set(swigCPtr, value);
    } 
    get {
      double ret = aidi_vision_clientPINVOKE.FeatureLocationResultWrapper_ap_get(swigCPtr);
      return ret;
    } 
  }

  public double recall {
    set {
      aidi_vision_clientPINVOKE.FeatureLocationResultWrapper_recall_set(swigCPtr, value);
    } 
    get {
      double ret = aidi_vision_clientPINVOKE.FeatureLocationResultWrapper_recall_get(swigCPtr);
      return ret;
    } 
  }

  public double position_ap {
    set {
      aidi_vision_clientPINVOKE.FeatureLocationResultWrapper_position_ap_set(swigCPtr, value);
    } 
    get {
      double ret = aidi_vision_clientPINVOKE.FeatureLocationResultWrapper_position_ap_get(swigCPtr);
      return ret;
    } 
  }

  public double position_recall {
    set {
      aidi_vision_clientPINVOKE.FeatureLocationResultWrapper_position_recall_set(swigCPtr, value);
    } 
    get {
      double ret = aidi_vision_clientPINVOKE.FeatureLocationResultWrapper_position_recall_get(swigCPtr);
      return ret;
    } 
  }

  public FeatureLocationResultWrapper() : this(aidi_vision_clientPINVOKE.new_FeatureLocationResultWrapper(), true) {
  }

}

}
namespace aqrose.aidi_vision_client {

public class DetectionResultWrapper : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DetectionResultWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DetectionResultWrapper obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DetectionResultWrapper() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_DetectionResultWrapper(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public FloatVector precise {
    set {
      aidi_vision_clientPINVOKE.DetectionResultWrapper_precise_set(swigCPtr, FloatVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = aidi_vision_clientPINVOKE.DetectionResultWrapper_precise_get(swigCPtr);
      FloatVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new FloatVector(cPtr, false);
      return ret;
    } 
  }

  public FloatVector recall {
    set {
      aidi_vision_clientPINVOKE.DetectionResultWrapper_recall_set(swigCPtr, FloatVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = aidi_vision_clientPINVOKE.DetectionResultWrapper_recall_get(swigCPtr);
      FloatVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new FloatVector(cPtr, false);
      return ret;
    } 
  }

  public FloatVector ap {
    set {
      aidi_vision_clientPINVOKE.DetectionResultWrapper_ap_set(swigCPtr, FloatVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = aidi_vision_clientPINVOKE.DetectionResultWrapper_ap_get(swigCPtr);
      FloatVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new FloatVector(cPtr, false);
      return ret;
    } 
  }

  public double mAP {
    set {
      aidi_vision_clientPINVOKE.DetectionResultWrapper_mAP_set(swigCPtr, value);
    } 
    get {
      double ret = aidi_vision_clientPINVOKE.DetectionResultWrapper_mAP_get(swigCPtr);
      return ret;
    } 
  }

  public float rect_recall {
    set {
      aidi_vision_clientPINVOKE.DetectionResultWrapper_rect_recall_set(swigCPtr, value);
    } 
    get {
      float ret = aidi_vision_clientPINVOKE.DetectionResultWrapper_rect_recall_get(swigCPtr);
      return ret;
    } 
  }

  public float rect_precise {
    set {
      aidi_vision_clientPINVOKE.DetectionResultWrapper_rect_precise_set(swigCPtr, value);
    } 
    get {
      float ret = aidi_vision_clientPINVOKE.DetectionResultWrapper_rect_precise_get(swigCPtr);
      return ret;
    } 
  }

  public float rect_loc_recall {
    set {
      aidi_vision_clientPINVOKE.DetectionResultWrapper_rect_loc_recall_set(swigCPtr, value);
    } 
    get {
      float ret = aidi_vision_clientPINVOKE.DetectionResultWrapper_rect_loc_recall_get(swigCPtr);
      return ret;
    } 
  }

  public float rect_loc_precise {
    set {
      aidi_vision_clientPINVOKE.DetectionResultWrapper_rect_loc_precise_set(swigCPtr, value);
    } 
    get {
      float ret = aidi_vision_clientPINVOKE.DetectionResultWrapper_rect_loc_precise_get(swigCPtr);
      return ret;
    } 
  }

  public int all_gt_num {
    set {
      aidi_vision_clientPINVOKE.DetectionResultWrapper_all_gt_num_set(swigCPtr, value);
    } 
    get {
      int ret = aidi_vision_clientPINVOKE.DetectionResultWrapper_all_gt_num_get(swigCPtr);
      return ret;
    } 
  }

  public int all_pred_num {
    set {
      aidi_vision_clientPINVOKE.DetectionResultWrapper_all_pred_num_set(swigCPtr, value);
    } 
    get {
      int ret = aidi_vision_clientPINVOKE.DetectionResultWrapper_all_pred_num_get(swigCPtr);
      return ret;
    } 
  }

  public DetectionResultWrapper() : this(aidi_vision_clientPINVOKE.new_DetectionResultWrapper(), true) {
  }

}

}
namespace aqrose.aidi_vision_client {

public class AIDI : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AIDI(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AIDI obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AIDI() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_AIDI(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public AIDI(string check_code) : this(aidi_vision_clientPINVOKE.new_AIDI__SWIG_0(check_code), true) {
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public AIDI() : this(aidi_vision_clientPINVOKE.new_AIDI__SWIG_1(), true) {
  }

  public void set_param(FactoryClientParamWrapper arg0) {
    aidi_vision_clientPINVOKE.AIDI_set_param(swigCPtr, FactoryClientParamWrapper.getCPtr(arg0));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void initial_test_model() {
    aidi_vision_clientPINVOKE.AIDI_initial_test_model(swigCPtr);
  }

  public void set_batch_size(IntVector batch_size) {
    aidi_vision_clientPINVOKE.AIDI_set_batch_size(swigCPtr, IntVector.getCPtr(batch_size));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public string start_test(AidiImage image) {
    string ret = aidi_vision_clientPINVOKE.AIDI_start_test__SWIG_0(swigCPtr, AidiImage.getCPtr(image));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void start_test(AidiImage image, BaseDetectResult reuslt) {
    aidi_vision_clientPINVOKE.AIDI_start_test__SWIG_1(swigCPtr, AidiImage.getCPtr(image), BaseDetectResult.getCPtr(reuslt));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public StringVector start_test(BatchAidiImage batch_images) {
    StringVector ret = new StringVector(aidi_vision_clientPINVOKE.AIDI_start_test__SWIG_2(swigCPtr, BatchAidiImage.getCPtr(batch_images)), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void start_test(BatchAidiImage batch_images, SWIGTYPE_p_std__vectorT_aq__BaseDetectResult_t results) {
    aidi_vision_clientPINVOKE.AIDI_start_test__SWIG_3(swigCPtr, BatchAidiImage.getCPtr(batch_images), SWIGTYPE_p_std__vectorT_aq__BaseDetectResult_t.getCPtr(results));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public string start_test_uchar(SWIGTYPE_p_uchar data, int width, int height) {
    string ret = aidi_vision_clientPINVOKE.AIDI_start_test_uchar(swigCPtr, SWIGTYPE_p_uchar.getCPtr(data), width, height);
    return ret;
  }

}

}
namespace aqrose.aidi_vision_client {

public class AIDIEntrance : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AIDIEntrance(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AIDIEntrance obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AIDIEntrance() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_AIDIEntrance(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public AIDIEntrance(string check_code) : this(aidi_vision_clientPINVOKE.new_AIDIEntrance__SWIG_0(check_code), true) {
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public AIDIEntrance() : this(aidi_vision_clientPINVOKE.new_AIDIEntrance__SWIG_1(), true) {
  }

  public void set_model_root(string root_path) {
    aidi_vision_clientPINVOKE.AIDIEntrance_set_model_root(swigCPtr, root_path);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void initialize() {
    aidi_vision_clientPINVOKE.AIDIEntrance_initialize__SWIG_0(swigCPtr);
  }

  public void initialize(bool use_gpu, int device_num) {
    aidi_vision_clientPINVOKE.AIDIEntrance_initialize__SWIG_1(swigCPtr, use_gpu, device_num);
  }

  public string entrance_test_image(AidiImage image) {
    string ret = aidi_vision_clientPINVOKE.AIDIEntrance_entrance_test_image(swigCPtr, AidiImage.getCPtr(image));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace aqrose.aidi_vision_client {

public class AidiClassify : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AidiClassify(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AidiClassify obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AidiClassify() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_AidiClassify(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public AidiClassify(string check_code) : this(aidi_vision_clientPINVOKE.new_AidiClassify__SWIG_0(check_code), true) {
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public AidiClassify() : this(aidi_vision_clientPINVOKE.new_AidiClassify__SWIG_1(), true) {
  }

  public void set_param(ClassifyClientParamWrapper arg0) {
    aidi_vision_clientPINVOKE.AidiClassify_set_param(swigCPtr, ClassifyClientParamWrapper.getCPtr(arg0));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void initial_test_model() {
    aidi_vision_clientPINVOKE.AidiClassify_initial_test_model(swigCPtr);
  }

  public int start_test(AidiImage image) {
    int ret = aidi_vision_clientPINVOKE.AidiClassify_start_test(swigCPtr, AidiImage.getCPtr(image));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace aqrose.aidi_vision_client {

public class AidiLocation : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AidiLocation(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AidiLocation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AidiLocation() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_AidiLocation(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public AidiLocation(string check_code) : this(aidi_vision_clientPINVOKE.new_AidiLocation__SWIG_0(check_code), true) {
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public AidiLocation() : this(aidi_vision_clientPINVOKE.new_AidiLocation__SWIG_1(), true) {
  }

  public void set_test_data(AidiImage test_source_image) {
    aidi_vision_clientPINVOKE.AidiLocation_set_test_data(swigCPtr, AidiImage.getCPtr(test_source_image));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool set_param(LocationClientParamWrapper param) {
    bool ret = aidi_vision_clientPINVOKE.AidiLocation_set_param(swigCPtr, LocationClientParamWrapper.getCPtr(param));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_score_threshold(float thresh) {
    aidi_vision_clientPINVOKE.AidiLocation_set_score_threshold(swigCPtr, thresh);
  }

  public void set_nms_threshold(float thresh) {
    aidi_vision_clientPINVOKE.AidiLocation_set_nms_threshold(swigCPtr, thresh);
  }

  public void set_test_batches(int n_batches) {
    aidi_vision_clientPINVOKE.AidiLocation_set_test_batches(swigCPtr, n_batches);
  }

  public void initialize_test_model() {
    aidi_vision_clientPINVOKE.AidiLocation_initialize_test_model(swigCPtr);
  }

  public void start_test() {
    aidi_vision_clientPINVOKE.AidiLocation_start_test(swigCPtr);
  }

  public FloatVector get_test_rect() {
    FloatVector ret = new FloatVector(aidi_vision_clientPINVOKE.AidiLocation_get_test_rect(swigCPtr), true);
    return ret;
  }

}

}
namespace aqrose.aidi_vision_client {

public class AidiSegment : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AidiSegment(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AidiSegment obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AidiSegment() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_AidiSegment(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public AidiSegment(string check_code) : this(aidi_vision_clientPINVOKE.new_AidiSegment__SWIG_0(check_code), true) {
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public AidiSegment() : this(aidi_vision_clientPINVOKE.new_AidiSegment__SWIG_1(), true) {
  }

  public void set_param(SegmentClientParamWrapper arg0) {
    aidi_vision_clientPINVOKE.AidiSegment_set_param(swigCPtr, SegmentClientParamWrapper.getCPtr(arg0));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_threshold(float value) {
    aidi_vision_clientPINVOKE.AidiSegment_set_threshold(swigCPtr, value);
  }

  public void set_use_filter(bool use_filter) {
    aidi_vision_clientPINVOKE.AidiSegment_set_use_filter(swigCPtr, use_filter);
  }

  public void set_filter_area(int min, int max) {
    aidi_vision_clientPINVOKE.AidiSegment_set_filter_area(swigCPtr, min, max);
  }

  public void set_filter_width(int min, int max) {
    aidi_vision_clientPINVOKE.AidiSegment_set_filter_width(swigCPtr, min, max);
  }

  public void set_filter_height(int min, int max) {
    aidi_vision_clientPINVOKE.AidiSegment_set_filter_height(swigCPtr, min, max);
  }

  public void set_target_filter_infos(int label_cls, bool use_filter, int area_min, int area_max, int width_min, int width_max, int height_min, int height_max) {
    aidi_vision_clientPINVOKE.AidiSegment_set_target_filter_infos(swigCPtr, label_cls, use_filter, area_min, area_max, width_min, width_max, height_min, height_max);
  }

  public void initial_test_model() {
    aidi_vision_clientPINVOKE.AidiSegment_initial_test_model(swigCPtr);
  }

  public AidiImage start_test(AidiImage source_image) {
    AidiImage ret = new AidiImage(aidi_vision_clientPINVOKE.AidiSegment_start_test__SWIG_0(swigCPtr, AidiImage.getCPtr(source_image)), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BatchAidiImage start_test(BatchAidiImage source_images) {
    BatchAidiImage ret = new BatchAidiImage(aidi_vision_clientPINVOKE.AidiSegment_start_test__SWIG_1(swigCPtr, BatchAidiImage.getCPtr(source_images)), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public AidiImage start_test_without_filter(AidiImage sourde_image) {
    AidiImage ret = new AidiImage(aidi_vision_clientPINVOKE.AidiSegment_start_test_without_filter__SWIG_0(swigCPtr, AidiImage.getCPtr(sourde_image)), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BatchAidiImage start_test_without_filter(BatchAidiImage source_images) {
    BatchAidiImage ret = new BatchAidiImage(aidi_vision_clientPINVOKE.AidiSegment_start_test_without_filter__SWIG_1(swigCPtr, BatchAidiImage.getCPtr(source_images)), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace aqrose.aidi_vision_client {

public class AidiCalculation : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AidiCalculation(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AidiCalculation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AidiCalculation() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_AidiCalculation(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public AidiCalculation() : this(aidi_vision_clientPINVOKE.new_AidiCalculation(), true) {
  }

  public void setIou_thresh(float value) {
    aidi_vision_clientPINVOKE.AidiCalculation_setIou_thresh(swigCPtr, value);
  }

  public void set_image_format(string format) {
    aidi_vision_clientPINVOKE.AidiCalculation_set_image_format__SWIG_0(swigCPtr, format);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_image_format() {
    aidi_vision_clientPINVOKE.AidiCalculation_set_image_format__SWIG_1(swigCPtr);
  }

  public LocationResultWrapper get_location_result(string label_file_path, string test_result_file_path, int sample_number) {
    LocationResultWrapper ret = new LocationResultWrapper(aidi_vision_clientPINVOKE.AidiCalculation_get_location_result__SWIG_0(swigCPtr, label_file_path, test_result_file_path, sample_number), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public LocationResultWrapper get_location_result(string label_file_path, string test_result_file_path, IntVector indexs) {
    LocationResultWrapper ret = new LocationResultWrapper(aidi_vision_clientPINVOKE.AidiCalculation_get_location_result__SWIG_1(swigCPtr, label_file_path, test_result_file_path, IntVector.getCPtr(indexs)), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SegmentResultWrapper get_detect_result(string label_file_path, string test_result_file_path, int sample_number) {
    SegmentResultWrapper ret = new SegmentResultWrapper(aidi_vision_clientPINVOKE.AidiCalculation_get_detect_result__SWIG_0(swigCPtr, label_file_path, test_result_file_path, sample_number), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SegmentResultWrapper get_detect_result(string label_file_path, string test_result_file_path, IntVector indexs) {
    SegmentResultWrapper ret = new SegmentResultWrapper(aidi_vision_clientPINVOKE.AidiCalculation_get_detect_result__SWIG_1(swigCPtr, label_file_path, test_result_file_path, IntVector.getCPtr(indexs)), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ClassifyResultWrapper get_classify_result(string label_file_path, string test_result_file_path, int sample_number) {
    ClassifyResultWrapper ret = new ClassifyResultWrapper(aidi_vision_clientPINVOKE.AidiCalculation_get_classify_result__SWIG_0(swigCPtr, label_file_path, test_result_file_path, sample_number), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ClassifyResultWrapper get_classify_result(string label_file_path, string test_result_file_path, IntVector indexs) {
    ClassifyResultWrapper ret = new ClassifyResultWrapper(aidi_vision_clientPINVOKE.AidiCalculation_get_classify_result__SWIG_1(swigCPtr, label_file_path, test_result_file_path, IntVector.getCPtr(indexs)), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FeatureLocationResultWrapper get_feature_location_result(string label_file_path, string test_result_file_path, StringIntMap label_dict, IntVector indexs) {
    FeatureLocationResultWrapper ret = new FeatureLocationResultWrapper(aidi_vision_clientPINVOKE.AidiCalculation_get_feature_location_result(swigCPtr, label_file_path, test_result_file_path, StringIntMap.getCPtr(label_dict), IntVector.getCPtr(indexs)), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DetectionResultWrapper get_detection_result(string label_file_path, string test_result_file_path, IntVector indexs, StringVector label_name_list) {
    DetectionResultWrapper ret = new DetectionResultWrapper(aidi_vision_clientPINVOKE.AidiCalculation_get_detection_result(swigCPtr, label_file_path, test_result_file_path, IntVector.getCPtr(indexs), StringVector.getCPtr(label_name_list)), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DetectionResultWrapper get_detection_result_normal(string label_file_path, string test_result_file_path, IntVector indexs) {
    DetectionResultWrapper ret = new DetectionResultWrapper(aidi_vision_clientPINVOKE.AidiCalculation_get_detection_result_normal(swigCPtr, label_file_path, test_result_file_path, IntVector.getCPtr(indexs)), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace aqrose.aidi_vision_client {

public class AidiSegmentRunner : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AidiSegmentRunner(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AidiSegmentRunner obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AidiSegmentRunner() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_AidiSegmentRunner(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public AidiSegmentRunner(string check_code) : this(aidi_vision_clientPINVOKE.new_AidiSegmentRunner__SWIG_0(check_code), true) {
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public AidiSegmentRunner() : this(aidi_vision_clientPINVOKE.new_AidiSegmentRunner__SWIG_1(), true) {
  }

  public void set_param(SegmentClientParamWrapper param) {
    aidi_vision_clientPINVOKE.AidiSegmentRunner_set_param(swigCPtr, SegmentClientParamWrapper.getCPtr(param));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_use_offset_threshold(bool use_offset_threshold) {
    aidi_vision_clientPINVOKE.AidiSegmentRunner_set_use_offset_threshold(swigCPtr, use_offset_threshold);
  }

  public void set_use_filter(bool use_filter) {
    aidi_vision_clientPINVOKE.AidiSegmentRunner_set_use_filter(swigCPtr, use_filter);
  }

  public void set_threshold(float value) {
    aidi_vision_clientPINVOKE.AidiSegmentRunner_set_threshold(swigCPtr, value);
  }

  public void set_filter_area(int min, int max) {
    aidi_vision_clientPINVOKE.AidiSegmentRunner_set_filter_area(swigCPtr, min, max);
  }

  public void set_filter_width(int min, int max) {
    aidi_vision_clientPINVOKE.AidiSegmentRunner_set_filter_width(swigCPtr, min, max);
  }

  public void set_filter_height(int min, int max) {
    aidi_vision_clientPINVOKE.AidiSegmentRunner_set_filter_height(swigCPtr, min, max);
  }

  public void start() {
    aidi_vision_clientPINVOKE.AidiSegmentRunner_start(swigCPtr);
  }

  public void release() {
    aidi_vision_clientPINVOKE.AidiSegmentRunner_release(swigCPtr);
  }

  public void set_test_batch_image(BatchAidiImage batch) {
    aidi_vision_clientPINVOKE.AidiSegmentRunner_set_test_batch_image(swigCPtr, BatchAidiImage.getCPtr(batch));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public BatchAidiImage get_detect_result() {
    BatchAidiImage ret = new BatchAidiImage(aidi_vision_clientPINVOKE.AidiSegmentRunner_get_detect_result(swigCPtr), true);
    return ret;
  }

}

}
namespace aqrose.aidi_vision_client {

public class AidiFactoryRunner : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AidiFactoryRunner(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AidiFactoryRunner obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AidiFactoryRunner() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_AidiFactoryRunner(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public AidiFactoryRunner(string check_code) : this(aidi_vision_clientPINVOKE.new_AidiFactoryRunner__SWIG_0(check_code), true) {
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public AidiFactoryRunner() : this(aidi_vision_clientPINVOKE.new_AidiFactoryRunner__SWIG_1(), true) {
  }

  public void set_param(FactoryClientParamWrapper param) {
    aidi_vision_clientPINVOKE.AidiFactoryRunner_set_param(swigCPtr, FactoryClientParamWrapper.getCPtr(param));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void start() {
    aidi_vision_clientPINVOKE.AidiFactoryRunner_start(swigCPtr);
  }

  public void release() {
    aidi_vision_clientPINVOKE.AidiFactoryRunner_release(swigCPtr);
  }

  public void set_batch_size(IntVector batch_size) {
    aidi_vision_clientPINVOKE.AidiFactoryRunner_set_batch_size(swigCPtr, IntVector.getCPtr(batch_size));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_test_batch_image(BatchAidiImage batch) {
    aidi_vision_clientPINVOKE.AidiFactoryRunner_set_test_batch_image(swigCPtr, BatchAidiImage.getCPtr(batch));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public StringVector get_detect_result() {
    StringVector ret = new StringVector(aidi_vision_clientPINVOKE.AidiFactoryRunner_get_detect_result__SWIG_0(swigCPtr), true);
    return ret;
  }

  public void get_detect_result(SWIGTYPE_p_std__vectorT_aq__BaseDetectResult_t results) {
    aidi_vision_clientPINVOKE.AidiFactoryRunner_get_detect_result__SWIG_1(swigCPtr, SWIGTYPE_p_std__vectorT_aq__BaseDetectResult_t.getCPtr(results));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace aqrose.aidi_vision_client {

public class AidiTools : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AidiTools(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AidiTools obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AidiTools() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_AidiTools(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public AidiTools() : this(aidi_vision_clientPINVOKE.new_AidiTools(), true) {
  }

  public int get_devices_number() {
    int ret = aidi_vision_clientPINVOKE.AidiTools_get_devices_number(swigCPtr);
    return ret;
  }

  public void get_xml_info(string file_path, StringVector labels, VecFloatVector rect_result, FloatVector scores) {
    aidi_vision_clientPINVOKE.AidiTools_get_xml_info(swigCPtr, file_path, StringVector.getCPtr(labels), VecFloatVector.getCPtr(rect_result), FloatVector.getCPtr(scores));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void write_detection_simple_xml(VecFloatVector boxs, StringVector labels, int index, string dst_dir) {
    aidi_vision_clientPINVOKE.AidiTools_write_detection_simple_xml(swigCPtr, VecFloatVector.getCPtr(boxs), StringVector.getCPtr(labels), index, dst_dir);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace aqrose.aidi_vision_client {

public class BaseDefect : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BaseDefect(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BaseDefect obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~BaseDefect() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_BaseDefect(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SWIGTYPE_p_cv__Size2f size {
    set {
      aidi_vision_clientPINVOKE.BaseDefect_size_set(swigCPtr, SWIGTYPE_p_cv__Size2f.getCPtr(value));
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_cv__Size2f ret = new SWIGTYPE_p_cv__Size2f(aidi_vision_clientPINVOKE.BaseDefect_size_get(swigCPtr), true);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_cv__Size2f rotate_size {
    set {
      aidi_vision_clientPINVOKE.BaseDefect_rotate_size_set(swigCPtr, SWIGTYPE_p_cv__Size2f.getCPtr(value));
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_cv__Size2f ret = new SWIGTYPE_p_cv__Size2f(aidi_vision_clientPINVOKE.BaseDefect_rotate_size_get(swigCPtr), true);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float angle {
    set {
      aidi_vision_clientPINVOKE.BaseDefect_angle_set(swigCPtr, value);
    } 
    get {
      float ret = aidi_vision_clientPINVOKE.BaseDefect_angle_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_cv__Point2f center {
    set {
      aidi_vision_clientPINVOKE.BaseDefect_center_set(swigCPtr, SWIGTYPE_p_cv__Point2f.getCPtr(value));
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_cv__Point2f ret = new SWIGTYPE_p_cv__Point2f(aidi_vision_clientPINVOKE.BaseDefect_center_get(swigCPtr), true);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_cv__Point tl {
    set {
      aidi_vision_clientPINVOKE.BaseDefect_tl_set(swigCPtr, SWIGTYPE_p_cv__Point.getCPtr(value));
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_cv__Point ret = new SWIGTYPE_p_cv__Point(aidi_vision_clientPINVOKE.BaseDefect_tl_get(swigCPtr), true);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double area {
    set {
      aidi_vision_clientPINVOKE.BaseDefect_area_set(swigCPtr, value);
    } 
    get {
      double ret = aidi_vision_clientPINVOKE.BaseDefect_area_get(swigCPtr);
      return ret;
    } 
  }

  public int type {
    set {
      aidi_vision_clientPINVOKE.BaseDefect_type_set(swigCPtr, value);
    } 
    get {
      int ret = aidi_vision_clientPINVOKE.BaseDefect_type_get(swigCPtr);
      return ret;
    } 
  }

  public string type_name {
    set {
      aidi_vision_clientPINVOKE.BaseDefect_type_name_set(swigCPtr, value);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = aidi_vision_clientPINVOKE.BaseDefect_type_name_get(swigCPtr);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float score {
    set {
      aidi_vision_clientPINVOKE.BaseDefect_score_set(swigCPtr, value);
    } 
    get {
      float ret = aidi_vision_clientPINVOKE.BaseDefect_score_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_cv__Point_t contours {
    set {
      aidi_vision_clientPINVOKE.BaseDefect_contours_set(swigCPtr, SWIGTYPE_p_std__vectorT_cv__Point_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = aidi_vision_clientPINVOKE.BaseDefect_contours_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_cv__Point_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_cv__Point_t(cPtr, false);
      return ret;
    } 
  }

  public string rect_index {
    set {
      aidi_vision_clientPINVOKE.BaseDefect_rect_index_set(swigCPtr, value);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = aidi_vision_clientPINVOKE.BaseDefect_rect_index_get(swigCPtr);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double length {
    set {
      aidi_vision_clientPINVOKE.BaseDefect_length_set(swigCPtr, value);
    } 
    get {
      double ret = aidi_vision_clientPINVOKE.BaseDefect_length_get(swigCPtr);
      return ret;
    } 
  }

  public BaseDefect() : this(aidi_vision_clientPINVOKE.new_BaseDefect(), true) {
  }

}

}
namespace aqrose.aidi_vision_client {

public class BaseDetectResult : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BaseDetectResult(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BaseDetectResult obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~BaseDetectResult() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_BaseDetectResult(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SWIGTYPE_p_cv__Mat source_image {
    set {
      aidi_vision_clientPINVOKE.BaseDetectResult_source_image_set(swigCPtr, SWIGTYPE_p_cv__Mat.getCPtr(value));
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_cv__Mat ret = new SWIGTYPE_p_cv__Mat(aidi_vision_clientPINVOKE.BaseDetectResult_source_image_get(swigCPtr), true);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_cv__Mat result_image {
    set {
      aidi_vision_clientPINVOKE.BaseDetectResult_result_image_set(swigCPtr, SWIGTYPE_p_cv__Mat.getCPtr(value));
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_cv__Mat ret = new SWIGTYPE_p_cv__Mat(aidi_vision_clientPINVOKE.BaseDetectResult_result_image_get(swigCPtr), true);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_aq__BaseDefect_t defects {
    set {
      aidi_vision_clientPINVOKE.BaseDetectResult_defects_set(swigCPtr, SWIGTYPE_p_std__vectorT_aq__BaseDefect_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = aidi_vision_clientPINVOKE.BaseDetectResult_defects_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_aq__BaseDefect_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_aq__BaseDefect_t(cPtr, false);
      return ret;
    } 
  }

  public string to_json() {
    string ret = aidi_vision_clientPINVOKE.BaseDetectResult_to_json(swigCPtr);
    return ret;
  }

  public void from_json(string json_str) {
    aidi_vision_clientPINVOKE.BaseDetectResult_from_json(swigCPtr, json_str);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public BaseDetectResult() : this(aidi_vision_clientPINVOKE.new_BaseDetectResult(), true) {
  }

}

}
namespace aqrose.aidi_vision_client {

public class OCRYesResult : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal OCRYesResult(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(OCRYesResult obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~OCRYesResult() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          aidi_vision_clientPINVOKE.delete_OCRYesResult(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public bool is_ocr_task {
    set {
      aidi_vision_clientPINVOKE.OCRYesResult_is_ocr_task_set(swigCPtr, value);
    } 
    get {
      bool ret = aidi_vision_clientPINVOKE.OCRYesResult_is_ocr_task_get(swigCPtr);
      return ret;
    } 
  }

  public bool keep_image {
    set {
      aidi_vision_clientPINVOKE.OCRYesResult_keep_image_set(swigCPtr, value);
    } 
    get {
      bool ret = aidi_vision_clientPINVOKE.OCRYesResult_keep_image_get(swigCPtr);
      return ret;
    } 
  }

  public int result_size {
    set {
      aidi_vision_clientPINVOKE.OCRYesResult_result_size_set(swigCPtr, value);
    } 
    get {
      int ret = aidi_vision_clientPINVOKE.OCRYesResult_result_size_get(swigCPtr);
      return ret;
    } 
  }

  public string ocr_str {
    set {
      aidi_vision_clientPINVOKE.OCRYesResult_ocr_str_set(swigCPtr, value);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = aidi_vision_clientPINVOKE.OCRYesResult_ocr_str_get(swigCPtr);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string date_time_str {
    set {
      aidi_vision_clientPINVOKE.OCRYesResult_date_time_str_set(swigCPtr, value);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = aidi_vision_clientPINVOKE.OCRYesResult_date_time_str_get(swigCPtr);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int class_num {
    set {
      aidi_vision_clientPINVOKE.OCRYesResult_class_num_set(swigCPtr, value);
    } 
    get {
      int ret = aidi_vision_clientPINVOKE.OCRYesResult_class_num_get(swigCPtr);
      return ret;
    } 
  }

  public string class_type_name {
    set {
      aidi_vision_clientPINVOKE.OCRYesResult_class_type_name_set(swigCPtr, value);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = aidi_vision_clientPINVOKE.OCRYesResult_class_type_name_get(swigCPtr);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float score {
    set {
      aidi_vision_clientPINVOKE.OCRYesResult_score_set(swigCPtr, value);
    } 
    get {
      float ret = aidi_vision_clientPINVOKE.OCRYesResult_score_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_cv__Mat result_img {
    set {
      aidi_vision_clientPINVOKE.OCRYesResult_result_img_set(swigCPtr, SWIGTYPE_p_cv__Mat.getCPtr(value));
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_cv__Mat ret = new SWIGTYPE_p_cv__Mat(aidi_vision_clientPINVOKE.OCRYesResult_result_img_get(swigCPtr), true);
      if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public OCRYesResult() : this(aidi_vision_clientPINVOKE.new_OCRYesResult(), true) {
  }

}

}
namespace aqrose.aidi_vision_client {

public enum PostDealType {
  POST_DEAL_NMS,
  POST_DEAL_SOFT_NMS
}

}
namespace aqrose.aidi_vision_client {

class aidi_vision_clientPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="SWIGRegisterExceptionCallbacks_aidi_vision_client")]
    public static extern void SWIGRegisterExceptionCallbacks_aidi_vision_client(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_aidi_vision_client")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_aidi_vision_client(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_aidi_vision_client(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_aidi_vision_client(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(aidi_vision_clientPINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(aidi_vision_clientPINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="SWIGRegisterStringCallback_aidi_vision_client")]
    public static extern void SWIGRegisterStringCallback_aidi_vision_client(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_aidi_vision_client(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static aidi_vision_clientPINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_IntVector_Clear___")]
  public static extern void IntVector_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_IntVector_Add___")]
  public static extern void IntVector_Add(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_IntVector_size___")]
  public static extern uint IntVector_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_IntVector_capacity___")]
  public static extern uint IntVector_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_IntVector_reserve___")]
  public static extern void IntVector_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_IntVector__SWIG_0___")]
  public static extern global::System.IntPtr new_IntVector__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_IntVector__SWIG_1___")]
  public static extern global::System.IntPtr new_IntVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_IntVector__SWIG_2___")]
  public static extern global::System.IntPtr new_IntVector__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_IntVector_getitemcopy___")]
  public static extern int IntVector_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_IntVector_getitem___")]
  public static extern int IntVector_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_IntVector_setitem___")]
  public static extern void IntVector_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_IntVector_AddRange___")]
  public static extern void IntVector_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_IntVector_GetRange___")]
  public static extern global::System.IntPtr IntVector_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_IntVector_Insert___")]
  public static extern void IntVector_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_IntVector_InsertRange___")]
  public static extern void IntVector_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_IntVector_RemoveAt___")]
  public static extern void IntVector_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_IntVector_RemoveRange___")]
  public static extern void IntVector_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_IntVector_Repeat___")]
  public static extern global::System.IntPtr IntVector_Repeat(int jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_IntVector_Reverse__SWIG_0___")]
  public static extern void IntVector_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_IntVector_Reverse__SWIG_1___")]
  public static extern void IntVector_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_IntVector_SetRange___")]
  public static extern void IntVector_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_IntVector_Contains___")]
  public static extern bool IntVector_Contains(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_IntVector_IndexOf___")]
  public static extern int IntVector_IndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_IntVector_LastIndexOf___")]
  public static extern int IntVector_LastIndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_IntVector_Remove___")]
  public static extern bool IntVector_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_IntVector___")]
  public static extern void delete_IntVector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FloatVector_Clear___")]
  public static extern void FloatVector_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FloatVector_Add___")]
  public static extern void FloatVector_Add(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FloatVector_size___")]
  public static extern uint FloatVector_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FloatVector_capacity___")]
  public static extern uint FloatVector_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FloatVector_reserve___")]
  public static extern void FloatVector_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_FloatVector__SWIG_0___")]
  public static extern global::System.IntPtr new_FloatVector__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_FloatVector__SWIG_1___")]
  public static extern global::System.IntPtr new_FloatVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_FloatVector__SWIG_2___")]
  public static extern global::System.IntPtr new_FloatVector__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FloatVector_getitemcopy___")]
  public static extern float FloatVector_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FloatVector_getitem___")]
  public static extern float FloatVector_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FloatVector_setitem___")]
  public static extern void FloatVector_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FloatVector_AddRange___")]
  public static extern void FloatVector_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FloatVector_GetRange___")]
  public static extern global::System.IntPtr FloatVector_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FloatVector_Insert___")]
  public static extern void FloatVector_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FloatVector_InsertRange___")]
  public static extern void FloatVector_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FloatVector_RemoveAt___")]
  public static extern void FloatVector_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FloatVector_RemoveRange___")]
  public static extern void FloatVector_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FloatVector_Repeat___")]
  public static extern global::System.IntPtr FloatVector_Repeat(float jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FloatVector_Reverse__SWIG_0___")]
  public static extern void FloatVector_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FloatVector_Reverse__SWIG_1___")]
  public static extern void FloatVector_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FloatVector_SetRange___")]
  public static extern void FloatVector_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FloatVector_Contains___")]
  public static extern bool FloatVector_Contains(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FloatVector_IndexOf___")]
  public static extern int FloatVector_IndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FloatVector_LastIndexOf___")]
  public static extern int FloatVector_LastIndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FloatVector_Remove___")]
  public static extern bool FloatVector_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_FloatVector___")]
  public static extern void delete_FloatVector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DoubleVector_Clear___")]
  public static extern void DoubleVector_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DoubleVector_Add___")]
  public static extern void DoubleVector_Add(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DoubleVector_size___")]
  public static extern uint DoubleVector_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DoubleVector_capacity___")]
  public static extern uint DoubleVector_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DoubleVector_reserve___")]
  public static extern void DoubleVector_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_DoubleVector__SWIG_0___")]
  public static extern global::System.IntPtr new_DoubleVector__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_DoubleVector__SWIG_1___")]
  public static extern global::System.IntPtr new_DoubleVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_DoubleVector__SWIG_2___")]
  public static extern global::System.IntPtr new_DoubleVector__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DoubleVector_getitemcopy___")]
  public static extern double DoubleVector_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DoubleVector_getitem___")]
  public static extern double DoubleVector_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DoubleVector_setitem___")]
  public static extern void DoubleVector_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DoubleVector_AddRange___")]
  public static extern void DoubleVector_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DoubleVector_GetRange___")]
  public static extern global::System.IntPtr DoubleVector_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DoubleVector_Insert___")]
  public static extern void DoubleVector_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DoubleVector_InsertRange___")]
  public static extern void DoubleVector_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DoubleVector_RemoveAt___")]
  public static extern void DoubleVector_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DoubleVector_RemoveRange___")]
  public static extern void DoubleVector_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DoubleVector_Repeat___")]
  public static extern global::System.IntPtr DoubleVector_Repeat(double jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DoubleVector_Reverse__SWIG_0___")]
  public static extern void DoubleVector_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DoubleVector_Reverse__SWIG_1___")]
  public static extern void DoubleVector_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DoubleVector_SetRange___")]
  public static extern void DoubleVector_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DoubleVector_Contains___")]
  public static extern bool DoubleVector_Contains(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DoubleVector_IndexOf___")]
  public static extern int DoubleVector_IndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DoubleVector_LastIndexOf___")]
  public static extern int DoubleVector_LastIndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DoubleVector_Remove___")]
  public static extern bool DoubleVector_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_DoubleVector___")]
  public static extern void delete_DoubleVector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringVector_Clear___")]
  public static extern void StringVector_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringVector_Add___")]
  public static extern void StringVector_Add(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringVector_size___")]
  public static extern uint StringVector_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringVector_capacity___")]
  public static extern uint StringVector_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringVector_reserve___")]
  public static extern void StringVector_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_StringVector__SWIG_0___")]
  public static extern global::System.IntPtr new_StringVector__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_StringVector__SWIG_1___")]
  public static extern global::System.IntPtr new_StringVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_StringVector__SWIG_2___")]
  public static extern global::System.IntPtr new_StringVector__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringVector_getitemcopy___")]
  public static extern string StringVector_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringVector_getitem___")]
  public static extern string StringVector_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringVector_setitem___")]
  public static extern void StringVector_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringVector_AddRange___")]
  public static extern void StringVector_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringVector_GetRange___")]
  public static extern global::System.IntPtr StringVector_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringVector_Insert___")]
  public static extern void StringVector_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringVector_InsertRange___")]
  public static extern void StringVector_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringVector_RemoveAt___")]
  public static extern void StringVector_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringVector_RemoveRange___")]
  public static extern void StringVector_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringVector_Repeat___")]
  public static extern global::System.IntPtr StringVector_Repeat(string jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringVector_Reverse__SWIG_0___")]
  public static extern void StringVector_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringVector_Reverse__SWIG_1___")]
  public static extern void StringVector_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringVector_SetRange___")]
  public static extern void StringVector_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringVector_Contains___")]
  public static extern bool StringVector_Contains(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringVector_IndexOf___")]
  public static extern int StringVector_IndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringVector_LastIndexOf___")]
  public static extern int StringVector_LastIndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringVector_Remove___")]
  public static extern bool StringVector_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_StringVector___")]
  public static extern void delete_StringVector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecFloatVector_Clear___")]
  public static extern void VecFloatVector_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecFloatVector_Add___")]
  public static extern void VecFloatVector_Add(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecFloatVector_size___")]
  public static extern uint VecFloatVector_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecFloatVector_capacity___")]
  public static extern uint VecFloatVector_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecFloatVector_reserve___")]
  public static extern void VecFloatVector_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_VecFloatVector__SWIG_0___")]
  public static extern global::System.IntPtr new_VecFloatVector__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_VecFloatVector__SWIG_1___")]
  public static extern global::System.IntPtr new_VecFloatVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_VecFloatVector__SWIG_2___")]
  public static extern global::System.IntPtr new_VecFloatVector__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecFloatVector_getitemcopy___")]
  public static extern global::System.IntPtr VecFloatVector_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecFloatVector_getitem___")]
  public static extern global::System.IntPtr VecFloatVector_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecFloatVector_setitem___")]
  public static extern void VecFloatVector_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecFloatVector_AddRange___")]
  public static extern void VecFloatVector_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecFloatVector_GetRange___")]
  public static extern global::System.IntPtr VecFloatVector_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecFloatVector_Insert___")]
  public static extern void VecFloatVector_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecFloatVector_InsertRange___")]
  public static extern void VecFloatVector_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecFloatVector_RemoveAt___")]
  public static extern void VecFloatVector_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecFloatVector_RemoveRange___")]
  public static extern void VecFloatVector_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecFloatVector_Repeat___")]
  public static extern global::System.IntPtr VecFloatVector_Repeat(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecFloatVector_Reverse__SWIG_0___")]
  public static extern void VecFloatVector_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecFloatVector_Reverse__SWIG_1___")]
  public static extern void VecFloatVector_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecFloatVector_SetRange___")]
  public static extern void VecFloatVector_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_VecFloatVector___")]
  public static extern void delete_VecFloatVector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecDoubleVector_Clear___")]
  public static extern void VecDoubleVector_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecDoubleVector_Add___")]
  public static extern void VecDoubleVector_Add(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecDoubleVector_size___")]
  public static extern uint VecDoubleVector_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecDoubleVector_capacity___")]
  public static extern uint VecDoubleVector_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecDoubleVector_reserve___")]
  public static extern void VecDoubleVector_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_VecDoubleVector__SWIG_0___")]
  public static extern global::System.IntPtr new_VecDoubleVector__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_VecDoubleVector__SWIG_1___")]
  public static extern global::System.IntPtr new_VecDoubleVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_VecDoubleVector__SWIG_2___")]
  public static extern global::System.IntPtr new_VecDoubleVector__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecDoubleVector_getitemcopy___")]
  public static extern global::System.IntPtr VecDoubleVector_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecDoubleVector_getitem___")]
  public static extern global::System.IntPtr VecDoubleVector_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecDoubleVector_setitem___")]
  public static extern void VecDoubleVector_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecDoubleVector_AddRange___")]
  public static extern void VecDoubleVector_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecDoubleVector_GetRange___")]
  public static extern global::System.IntPtr VecDoubleVector_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecDoubleVector_Insert___")]
  public static extern void VecDoubleVector_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecDoubleVector_InsertRange___")]
  public static extern void VecDoubleVector_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecDoubleVector_RemoveAt___")]
  public static extern void VecDoubleVector_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecDoubleVector_RemoveRange___")]
  public static extern void VecDoubleVector_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecDoubleVector_Repeat___")]
  public static extern global::System.IntPtr VecDoubleVector_Repeat(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecDoubleVector_Reverse__SWIG_0___")]
  public static extern void VecDoubleVector_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecDoubleVector_Reverse__SWIG_1___")]
  public static extern void VecDoubleVector_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecDoubleVector_SetRange___")]
  public static extern void VecDoubleVector_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_VecDoubleVector___")]
  public static extern void delete_VecDoubleVector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecIntVector_Clear___")]
  public static extern void VecIntVector_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecIntVector_Add___")]
  public static extern void VecIntVector_Add(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecIntVector_size___")]
  public static extern uint VecIntVector_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecIntVector_capacity___")]
  public static extern uint VecIntVector_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecIntVector_reserve___")]
  public static extern void VecIntVector_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_VecIntVector__SWIG_0___")]
  public static extern global::System.IntPtr new_VecIntVector__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_VecIntVector__SWIG_1___")]
  public static extern global::System.IntPtr new_VecIntVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_VecIntVector__SWIG_2___")]
  public static extern global::System.IntPtr new_VecIntVector__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecIntVector_getitemcopy___")]
  public static extern global::System.IntPtr VecIntVector_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecIntVector_getitem___")]
  public static extern global::System.IntPtr VecIntVector_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecIntVector_setitem___")]
  public static extern void VecIntVector_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecIntVector_AddRange___")]
  public static extern void VecIntVector_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecIntVector_GetRange___")]
  public static extern global::System.IntPtr VecIntVector_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecIntVector_Insert___")]
  public static extern void VecIntVector_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecIntVector_InsertRange___")]
  public static extern void VecIntVector_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecIntVector_RemoveAt___")]
  public static extern void VecIntVector_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecIntVector_RemoveRange___")]
  public static extern void VecIntVector_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecIntVector_Repeat___")]
  public static extern global::System.IntPtr VecIntVector_Repeat(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecIntVector_Reverse__SWIG_0___")]
  public static extern void VecIntVector_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecIntVector_Reverse__SWIG_1___")]
  public static extern void VecIntVector_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecIntVector_SetRange___")]
  public static extern void VecIntVector_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_VecIntVector___")]
  public static extern void delete_VecIntVector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecStringVector_Clear___")]
  public static extern void VecStringVector_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecStringVector_Add___")]
  public static extern void VecStringVector_Add(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecStringVector_size___")]
  public static extern uint VecStringVector_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecStringVector_capacity___")]
  public static extern uint VecStringVector_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecStringVector_reserve___")]
  public static extern void VecStringVector_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_VecStringVector__SWIG_0___")]
  public static extern global::System.IntPtr new_VecStringVector__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_VecStringVector__SWIG_1___")]
  public static extern global::System.IntPtr new_VecStringVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_VecStringVector__SWIG_2___")]
  public static extern global::System.IntPtr new_VecStringVector__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecStringVector_getitemcopy___")]
  public static extern global::System.IntPtr VecStringVector_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecStringVector_getitem___")]
  public static extern global::System.IntPtr VecStringVector_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecStringVector_setitem___")]
  public static extern void VecStringVector_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecStringVector_AddRange___")]
  public static extern void VecStringVector_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecStringVector_GetRange___")]
  public static extern global::System.IntPtr VecStringVector_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecStringVector_Insert___")]
  public static extern void VecStringVector_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecStringVector_InsertRange___")]
  public static extern void VecStringVector_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecStringVector_RemoveAt___")]
  public static extern void VecStringVector_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecStringVector_RemoveRange___")]
  public static extern void VecStringVector_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecStringVector_Repeat___")]
  public static extern global::System.IntPtr VecStringVector_Repeat(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecStringVector_Reverse__SWIG_0___")]
  public static extern void VecStringVector_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecStringVector_Reverse__SWIG_1___")]
  public static extern void VecStringVector_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_VecStringVector_SetRange___")]
  public static extern void VecStringVector_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_VecStringVector___")]
  public static extern void delete_VecStringVector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_StringIntMap__SWIG_0___")]
  public static extern global::System.IntPtr new_StringIntMap__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_StringIntMap__SWIG_1___")]
  public static extern global::System.IntPtr new_StringIntMap__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringIntMap_size___")]
  public static extern uint StringIntMap_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringIntMap_empty___")]
  public static extern bool StringIntMap_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringIntMap_Clear___")]
  public static extern void StringIntMap_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringIntMap_getitem___")]
  public static extern int StringIntMap_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringIntMap_setitem___")]
  public static extern void StringIntMap_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringIntMap_ContainsKey___")]
  public static extern bool StringIntMap_ContainsKey(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringIntMap_Add___")]
  public static extern void StringIntMap_Add(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringIntMap_Remove___")]
  public static extern bool StringIntMap_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringIntMap_create_iterator_begin___")]
  public static extern global::System.IntPtr StringIntMap_create_iterator_begin(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringIntMap_get_next_key___")]
  public static extern string StringIntMap_get_next_key(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringIntMap_destroy_iterator___")]
  public static extern void StringIntMap_destroy_iterator(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_StringIntMap___")]
  public static extern void delete_StringIntMap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_StringFloatMap__SWIG_0___")]
  public static extern global::System.IntPtr new_StringFloatMap__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_StringFloatMap__SWIG_1___")]
  public static extern global::System.IntPtr new_StringFloatMap__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringFloatMap_size___")]
  public static extern uint StringFloatMap_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringFloatMap_empty___")]
  public static extern bool StringFloatMap_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringFloatMap_Clear___")]
  public static extern void StringFloatMap_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringFloatMap_getitem___")]
  public static extern float StringFloatMap_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringFloatMap_setitem___")]
  public static extern void StringFloatMap_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringFloatMap_ContainsKey___")]
  public static extern bool StringFloatMap_ContainsKey(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringFloatMap_Add___")]
  public static extern void StringFloatMap_Add(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringFloatMap_Remove___")]
  public static extern bool StringFloatMap_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringFloatMap_create_iterator_begin___")]
  public static extern global::System.IntPtr StringFloatMap_create_iterator_begin(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringFloatMap_get_next_key___")]
  public static extern string StringFloatMap_get_next_key(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_StringFloatMap_destroy_iterator___")]
  public static extern void StringFloatMap_destroy_iterator(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_StringFloatMap___")]
  public static extern void delete_StringFloatMap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_AidiImage__SWIG_0___")]
  public static extern global::System.IntPtr new_AidiImage__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_AidiImage__SWIG_1___")]
  public static extern global::System.IntPtr new_AidiImage__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_AidiImage__SWIG_2___")]
  public static extern global::System.IntPtr new_AidiImage__SWIG_2(int jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_AidiImage__SWIG_3___")]
  public static extern global::System.IntPtr new_AidiImage__SWIG_3(int jarg1, int jarg2, int jarg3, string jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_AidiImage___")]
  public static extern void delete_AidiImage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_from_mat___")]
  public static extern void AidiImage_from_mat(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_to_mat___")]
  public static extern global::System.IntPtr AidiImage_to_mat(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_from_file__SWIG_0___")]
  public static extern void AidiImage_from_file__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_from_file__SWIG_1___")]
  public static extern void AidiImage_from_file__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_to_file__SWIG_0___")]
  public static extern bool AidiImage_to_file__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_decode__SWIG_0___")]
  public static extern void AidiImage_decode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_decode__SWIG_1___")]
  public static extern void AidiImage_decode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_encode___")]
  public static extern string AidiImage_encode(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_show__SWIG_0___")]
  public static extern void AidiImage_show__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_show__SWIG_1___")]
  public static extern void AidiImage_show__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_from_chars___")]
  public static extern void AidiImage_from_chars(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]byte[] jarg2, int jarg3, int jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_to_chars___")]
  public static extern void AidiImage_to_chars(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]byte[] jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_from_IntVector__SWIG_0___")]
  public static extern void AidiImage_from_IntVector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, int jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_from_IntVector__SWIG_1___")]
  public static extern void AidiImage_from_IntVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_to_IntVector___")]
  public static extern global::System.IntPtr AidiImage_to_IntVector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_from_FloatVector__SWIG_0___")]
  public static extern void AidiImage_from_FloatVector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, int jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_from_FloatVector__SWIG_1___")]
  public static extern void AidiImage_from_FloatVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_to_FloatVector___")]
  public static extern global::System.IntPtr AidiImage_to_FloatVector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_from_string__SWIG_0___")]
  public static extern void AidiImage_from_string__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, int jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_from_string__SWIG_1___")]
  public static extern void AidiImage_from_string__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_to_string___")]
  public static extern string AidiImage_to_string(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_draw_result__SWIG_0___")]
  public static extern bool AidiImage_draw_result__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_empty___")]
  public static extern bool AidiImage_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_data_size___")]
  public static extern int AidiImage_data_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_data_byte_size___")]
  public static extern int AidiImage_data_byte_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_height___")]
  public static extern int AidiImage_height(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_width___")]
  public static extern int AidiImage_width(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_channels___")]
  public static extern int AidiImage_channels(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_release___")]
  public static extern void AidiImage_release(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_get_mat___")]
  public static extern void AidiImage_get_mat(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_get_mat_const___")]
  public static extern global::System.IntPtr AidiImage_get_mat_const(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_set_mat___")]
  public static extern void AidiImage_set_mat(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_channel___")]
  public static extern int AidiImage_channel(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_mat_to_char_ptr___")]
  public static extern void AidiImage_mat_to_char_ptr(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]byte[] jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_char_ptr_to_mat___")]
  public static extern void AidiImage_char_ptr_to_mat(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]byte[] jarg2, int jarg3, int jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_vector_int_to_mat___")]
  public static extern void AidiImage_vector_int_to_mat(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_vector_float_to_mat___")]
  public static extern void AidiImage_vector_float_to_mat(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_mat_to_vector_int___")]
  public static extern void AidiImage_mat_to_vector_int(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_mat_to_vector_float___")]
  public static extern void AidiImage_mat_to_vector_float(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_read_image__SWIG_0___")]
  public static extern void AidiImage_read_image__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_read_image__SWIG_1___")]
  public static extern void AidiImage_read_image__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_save_image___")]
  public static extern void AidiImage_save_image(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiImage_show_image___")]
  public static extern void AidiImage_show_image(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_BatchAidiImage___")]
  public static extern global::System.IntPtr new_BatchAidiImage();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_BatchAidiImage___")]
  public static extern void delete_BatchAidiImage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BatchAidiImage_add_image__SWIG_0___")]
  public static extern void BatchAidiImage_add_image__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BatchAidiImage_add_image__SWIG_1___")]
  public static extern void BatchAidiImage_add_image__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BatchAidiImage_add_image__SWIG_2___")]
  public static extern void BatchAidiImage_add_image__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]byte[] jarg2, int jarg3, int jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BatchAidiImage_clear_images___")]
  public static extern void BatchAidiImage_clear_images(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BatchAidiImage_show_all_images___")]
  public static extern void BatchAidiImage_show_all_images(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BatchAidiImage_get_images_size___")]
  public static extern int BatchAidiImage_get_images_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BatchAidiImage_get_all_images___")]
  public static extern void BatchAidiImage_get_all_images(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BatchAidiImage_set_image_list___")]
  public static extern void BatchAidiImage_set_image_list(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BatchAidiImage_at___")]
  public static extern global::System.IntPtr BatchAidiImage_at(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FactoryClientParamWrapper_save_model_path_list_set___")]
  public static extern void FactoryClientParamWrapper_save_model_path_list_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FactoryClientParamWrapper_save_model_path_list_get___")]
  public static extern global::System.IntPtr FactoryClientParamWrapper_save_model_path_list_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FactoryClientParamWrapper_operator_name_list_set___")]
  public static extern void FactoryClientParamWrapper_operator_name_list_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FactoryClientParamWrapper_operator_name_list_get___")]
  public static extern global::System.IntPtr FactoryClientParamWrapper_operator_name_list_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FactoryClientParamWrapper_operator_type_list_set___")]
  public static extern void FactoryClientParamWrapper_operator_type_list_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FactoryClientParamWrapper_operator_type_list_get___")]
  public static extern global::System.IntPtr FactoryClientParamWrapper_operator_type_list_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FactoryClientParamWrapper_device_number_set___")]
  public static extern void FactoryClientParamWrapper_device_number_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FactoryClientParamWrapper_device_number_get___")]
  public static extern int FactoryClientParamWrapper_device_number_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FactoryClientParamWrapper_use_gpu_set___")]
  public static extern void FactoryClientParamWrapper_use_gpu_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FactoryClientParamWrapper_use_gpu_get___")]
  public static extern bool FactoryClientParamWrapper_use_gpu_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FactoryClientParamWrapper_use_runtime_set___")]
  public static extern void FactoryClientParamWrapper_use_runtime_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FactoryClientParamWrapper_use_runtime_get___")]
  public static extern bool FactoryClientParamWrapper_use_runtime_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_FactoryClientParamWrapper___")]
  public static extern global::System.IntPtr new_FactoryClientParamWrapper();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_FactoryClientParamWrapper___")]
  public static extern void delete_FactoryClientParamWrapper(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_ClassifyClientParamWrapper_batch_size_set___")]
  public static extern void ClassifyClientParamWrapper_batch_size_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_ClassifyClientParamWrapper_batch_size_get___")]
  public static extern int ClassifyClientParamWrapper_batch_size_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_ClassifyClientParamWrapper_use_gpu_set___")]
  public static extern void ClassifyClientParamWrapper_use_gpu_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_ClassifyClientParamWrapper_use_gpu_get___")]
  public static extern bool ClassifyClientParamWrapper_use_gpu_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_ClassifyClientParamWrapper_device_number_set___")]
  public static extern void ClassifyClientParamWrapper_device_number_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_ClassifyClientParamWrapper_device_number_get___")]
  public static extern int ClassifyClientParamWrapper_device_number_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_ClassifyClientParamWrapper_save_model_path_set___")]
  public static extern void ClassifyClientParamWrapper_save_model_path_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_ClassifyClientParamWrapper_save_model_path_get___")]
  public static extern string ClassifyClientParamWrapper_save_model_path_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_ClassifyClientParamWrapper_use_runtime_set___")]
  public static extern void ClassifyClientParamWrapper_use_runtime_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_ClassifyClientParamWrapper_use_runtime_get___")]
  public static extern bool ClassifyClientParamWrapper_use_runtime_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_ClassifyClientParamWrapper_encrypt_set___")]
  public static extern void ClassifyClientParamWrapper_encrypt_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_ClassifyClientParamWrapper_encrypt_get___")]
  public static extern bool ClassifyClientParamWrapper_encrypt_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_ClassifyClientParamWrapper_model_path_set___")]
  public static extern void ClassifyClientParamWrapper_model_path_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_ClassifyClientParamWrapper_model_path_get___")]
  public static extern string ClassifyClientParamWrapper_model_path_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_ClassifyClientParamWrapper_force_set_gpu_set___")]
  public static extern void ClassifyClientParamWrapper_force_set_gpu_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_ClassifyClientParamWrapper_force_set_gpu_get___")]
  public static extern bool ClassifyClientParamWrapper_force_set_gpu_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_ClassifyClientParamWrapper___")]
  public static extern global::System.IntPtr new_ClassifyClientParamWrapper();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_ClassifyClientParamWrapper___")]
  public static extern void delete_ClassifyClientParamWrapper(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_model_path_set___")]
  public static extern void LocationClientParamWrapper_model_path_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_model_path_get___")]
  public static extern string LocationClientParamWrapper_model_path_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_deploy_set___")]
  public static extern void LocationClientParamWrapper_deploy_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_deploy_get___")]
  public static extern string LocationClientParamWrapper_deploy_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_save_model_path_set___")]
  public static extern void LocationClientParamWrapper_save_model_path_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_save_model_path_get___")]
  public static extern string LocationClientParamWrapper_save_model_path_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_save_model_path_defined_set___")]
  public static extern void LocationClientParamWrapper_save_model_path_defined_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_save_model_path_defined_get___")]
  public static extern bool LocationClientParamWrapper_save_model_path_defined_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_test_input_shape_w_set___")]
  public static extern void LocationClientParamWrapper_test_input_shape_w_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_test_input_shape_w_get___")]
  public static extern int LocationClientParamWrapper_test_input_shape_w_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_test_input_shape_h_set___")]
  public static extern void LocationClientParamWrapper_test_input_shape_h_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_test_input_shape_h_get___")]
  public static extern int LocationClientParamWrapper_test_input_shape_h_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_test_input_shape_c_set___")]
  public static extern void LocationClientParamWrapper_test_input_shape_c_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_test_input_shape_c_get___")]
  public static extern int LocationClientParamWrapper_test_input_shape_c_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_test_input_shape_set___")]
  public static extern void LocationClientParamWrapper_test_input_shape_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_test_input_shape_get___")]
  public static extern int LocationClientParamWrapper_test_input_shape_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_batch_size_set___")]
  public static extern void LocationClientParamWrapper_batch_size_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_batch_size_get___")]
  public static extern int LocationClientParamWrapper_batch_size_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_use_gpu_set___")]
  public static extern void LocationClientParamWrapper_use_gpu_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_use_gpu_get___")]
  public static extern bool LocationClientParamWrapper_use_gpu_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_device_number_set___")]
  public static extern void LocationClientParamWrapper_device_number_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_device_number_get___")]
  public static extern int LocationClientParamWrapper_device_number_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_test_model_initialized__set___")]
  public static extern void LocationClientParamWrapper_test_model_initialized__set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_test_model_initialized__get___")]
  public static extern bool LocationClientParamWrapper_test_model_initialized__get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_long_detection_set___")]
  public static extern void LocationClientParamWrapper_long_detection_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_long_detection_get___")]
  public static extern bool LocationClientParamWrapper_long_detection_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_split_set___")]
  public static extern void LocationClientParamWrapper_split_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_split_get___")]
  public static extern int LocationClientParamWrapper_split_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_split_w_set___")]
  public static extern void LocationClientParamWrapper_split_w_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_split_w_get___")]
  public static extern int LocationClientParamWrapper_split_w_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_split_h_set___")]
  public static extern void LocationClientParamWrapper_split_h_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_split_h_get___")]
  public static extern int LocationClientParamWrapper_split_h_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_encrypt_set___")]
  public static extern void LocationClientParamWrapper_encrypt_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_encrypt_get___")]
  public static extern bool LocationClientParamWrapper_encrypt_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_use_runtime_set___")]
  public static extern void LocationClientParamWrapper_use_runtime_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_use_runtime_get___")]
  public static extern bool LocationClientParamWrapper_use_runtime_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_force_set_gpu_set___")]
  public static extern void LocationClientParamWrapper_force_set_gpu_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationClientParamWrapper_force_set_gpu_get___")]
  public static extern bool LocationClientParamWrapper_force_set_gpu_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_LocationClientParamWrapper___")]
  public static extern global::System.IntPtr new_LocationClientParamWrapper();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_LocationClientParamWrapper___")]
  public static extern void delete_LocationClientParamWrapper(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentClientParamWrapper_device_number_set___")]
  public static extern void SegmentClientParamWrapper_device_number_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentClientParamWrapper_device_number_get___")]
  public static extern int SegmentClientParamWrapper_device_number_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentClientParamWrapper_use_gpu_set___")]
  public static extern void SegmentClientParamWrapper_use_gpu_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentClientParamWrapper_use_gpu_get___")]
  public static extern bool SegmentClientParamWrapper_use_gpu_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentClientParamWrapper_save_model_path_set___")]
  public static extern void SegmentClientParamWrapper_save_model_path_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentClientParamWrapper_save_model_path_get___")]
  public static extern string SegmentClientParamWrapper_save_model_path_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentClientParamWrapper_batch_size_set___")]
  public static extern void SegmentClientParamWrapper_batch_size_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentClientParamWrapper_batch_size_get___")]
  public static extern int SegmentClientParamWrapper_batch_size_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentClientParamWrapper_use_runtime_set___")]
  public static extern void SegmentClientParamWrapper_use_runtime_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentClientParamWrapper_use_runtime_get___")]
  public static extern bool SegmentClientParamWrapper_use_runtime_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentClientParamWrapper_encrypt_set___")]
  public static extern void SegmentClientParamWrapper_encrypt_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentClientParamWrapper_encrypt_get___")]
  public static extern bool SegmentClientParamWrapper_encrypt_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentClientParamWrapper_model_path_set___")]
  public static extern void SegmentClientParamWrapper_model_path_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentClientParamWrapper_model_path_get___")]
  public static extern string SegmentClientParamWrapper_model_path_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentClientParamWrapper_force_set_gpu_set___")]
  public static extern void SegmentClientParamWrapper_force_set_gpu_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentClientParamWrapper_force_set_gpu_get___")]
  public static extern bool SegmentClientParamWrapper_force_set_gpu_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_SegmentClientParamWrapper___")]
  public static extern global::System.IntPtr new_SegmentClientParamWrapper();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_SegmentClientParamWrapper___")]
  public static extern void delete_SegmentClientParamWrapper(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationResultWrapper_precise_set___")]
  public static extern void LocationResultWrapper_precise_set(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationResultWrapper_precise_get___")]
  public static extern double LocationResultWrapper_precise_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationResultWrapper_recall_set___")]
  public static extern void LocationResultWrapper_recall_set(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationResultWrapper_recall_get___")]
  public static extern double LocationResultWrapper_recall_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationResultWrapper_all_gt_num_set___")]
  public static extern void LocationResultWrapper_all_gt_num_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationResultWrapper_all_gt_num_get___")]
  public static extern int LocationResultWrapper_all_gt_num_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationResultWrapper_all_pred_num_set___")]
  public static extern void LocationResultWrapper_all_pred_num_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationResultWrapper_all_pred_num_get___")]
  public static extern int LocationResultWrapper_all_pred_num_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationResultWrapper_recall_num_set___")]
  public static extern void LocationResultWrapper_recall_num_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationResultWrapper_recall_num_get___")]
  public static extern int LocationResultWrapper_recall_num_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationResultWrapper_precise_num_set___")]
  public static extern void LocationResultWrapper_precise_num_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_LocationResultWrapper_precise_num_get___")]
  public static extern int LocationResultWrapper_precise_num_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_LocationResultWrapper___")]
  public static extern global::System.IntPtr new_LocationResultWrapper();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_LocationResultWrapper___")]
  public static extern void delete_LocationResultWrapper(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentResultWrapper_recall_set___")]
  public static extern void SegmentResultWrapper_recall_set(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentResultWrapper_recall_get___")]
  public static extern double SegmentResultWrapper_recall_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentResultWrapper_ap_set___")]
  public static extern void SegmentResultWrapper_ap_set(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentResultWrapper_ap_get___")]
  public static extern double SegmentResultWrapper_ap_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentResultWrapper_center_recall_set___")]
  public static extern void SegmentResultWrapper_center_recall_set(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentResultWrapper_center_recall_get___")]
  public static extern double SegmentResultWrapper_center_recall_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentResultWrapper_center_ap_set___")]
  public static extern void SegmentResultWrapper_center_ap_set(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentResultWrapper_center_ap_get___")]
  public static extern double SegmentResultWrapper_center_ap_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentResultWrapper_all_gt_num_set___")]
  public static extern void SegmentResultWrapper_all_gt_num_set(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentResultWrapper_all_gt_num_get___")]
  public static extern long SegmentResultWrapper_all_gt_num_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentResultWrapper_recall_num_set___")]
  public static extern void SegmentResultWrapper_recall_num_set(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentResultWrapper_recall_num_get___")]
  public static extern long SegmentResultWrapper_recall_num_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentResultWrapper_all_center_num_set___")]
  public static extern void SegmentResultWrapper_all_center_num_set(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentResultWrapper_all_center_num_get___")]
  public static extern long SegmentResultWrapper_all_center_num_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentResultWrapper_center_recall_num_set___")]
  public static extern void SegmentResultWrapper_center_recall_num_set(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_SegmentResultWrapper_center_recall_num_get___")]
  public static extern long SegmentResultWrapper_center_recall_num_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_SegmentResultWrapper___")]
  public static extern global::System.IntPtr new_SegmentResultWrapper();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_SegmentResultWrapper___")]
  public static extern void delete_SegmentResultWrapper(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_ClassifyResultWrapper_acc_set___")]
  public static extern void ClassifyResultWrapper_acc_set(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_ClassifyResultWrapper_acc_get___")]
  public static extern double ClassifyResultWrapper_acc_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_ClassifyResultWrapper_recall_set___")]
  public static extern void ClassifyResultWrapper_recall_set(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_ClassifyResultWrapper_recall_get___")]
  public static extern double ClassifyResultWrapper_recall_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_ClassifyResultWrapper___")]
  public static extern global::System.IntPtr new_ClassifyResultWrapper();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_ClassifyResultWrapper___")]
  public static extern void delete_ClassifyResultWrapper(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FeatureLocationResultWrapper_ap_set___")]
  public static extern void FeatureLocationResultWrapper_ap_set(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FeatureLocationResultWrapper_ap_get___")]
  public static extern double FeatureLocationResultWrapper_ap_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FeatureLocationResultWrapper_recall_set___")]
  public static extern void FeatureLocationResultWrapper_recall_set(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FeatureLocationResultWrapper_recall_get___")]
  public static extern double FeatureLocationResultWrapper_recall_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FeatureLocationResultWrapper_position_ap_set___")]
  public static extern void FeatureLocationResultWrapper_position_ap_set(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FeatureLocationResultWrapper_position_ap_get___")]
  public static extern double FeatureLocationResultWrapper_position_ap_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FeatureLocationResultWrapper_position_recall_set___")]
  public static extern void FeatureLocationResultWrapper_position_recall_set(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_FeatureLocationResultWrapper_position_recall_get___")]
  public static extern double FeatureLocationResultWrapper_position_recall_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_FeatureLocationResultWrapper___")]
  public static extern global::System.IntPtr new_FeatureLocationResultWrapper();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_FeatureLocationResultWrapper___")]
  public static extern void delete_FeatureLocationResultWrapper(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DetectionResultWrapper_precise_set___")]
  public static extern void DetectionResultWrapper_precise_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DetectionResultWrapper_precise_get___")]
  public static extern global::System.IntPtr DetectionResultWrapper_precise_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DetectionResultWrapper_recall_set___")]
  public static extern void DetectionResultWrapper_recall_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DetectionResultWrapper_recall_get___")]
  public static extern global::System.IntPtr DetectionResultWrapper_recall_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DetectionResultWrapper_ap_set___")]
  public static extern void DetectionResultWrapper_ap_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DetectionResultWrapper_ap_get___")]
  public static extern global::System.IntPtr DetectionResultWrapper_ap_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DetectionResultWrapper_mAP_set___")]
  public static extern void DetectionResultWrapper_mAP_set(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DetectionResultWrapper_mAP_get___")]
  public static extern double DetectionResultWrapper_mAP_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DetectionResultWrapper_rect_recall_set___")]
  public static extern void DetectionResultWrapper_rect_recall_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DetectionResultWrapper_rect_recall_get___")]
  public static extern float DetectionResultWrapper_rect_recall_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DetectionResultWrapper_rect_precise_set___")]
  public static extern void DetectionResultWrapper_rect_precise_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DetectionResultWrapper_rect_precise_get___")]
  public static extern float DetectionResultWrapper_rect_precise_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DetectionResultWrapper_rect_loc_recall_set___")]
  public static extern void DetectionResultWrapper_rect_loc_recall_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DetectionResultWrapper_rect_loc_recall_get___")]
  public static extern float DetectionResultWrapper_rect_loc_recall_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DetectionResultWrapper_rect_loc_precise_set___")]
  public static extern void DetectionResultWrapper_rect_loc_precise_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DetectionResultWrapper_rect_loc_precise_get___")]
  public static extern float DetectionResultWrapper_rect_loc_precise_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DetectionResultWrapper_all_gt_num_set___")]
  public static extern void DetectionResultWrapper_all_gt_num_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DetectionResultWrapper_all_gt_num_get___")]
  public static extern int DetectionResultWrapper_all_gt_num_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DetectionResultWrapper_all_pred_num_set___")]
  public static extern void DetectionResultWrapper_all_pred_num_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_DetectionResultWrapper_all_pred_num_get___")]
  public static extern int DetectionResultWrapper_all_pred_num_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_DetectionResultWrapper___")]
  public static extern global::System.IntPtr new_DetectionResultWrapper();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_DetectionResultWrapper___")]
  public static extern void delete_DetectionResultWrapper(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_AIDI__SWIG_0___")]
  public static extern global::System.IntPtr new_AIDI__SWIG_0(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_AIDI__SWIG_1___")]
  public static extern global::System.IntPtr new_AIDI__SWIG_1();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_AIDI___")]
  public static extern void delete_AIDI(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AIDI_set_param___")]
  public static extern void AIDI_set_param(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AIDI_initial_test_model___")]
  public static extern void AIDI_initial_test_model(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AIDI_set_batch_size___")]
  public static extern void AIDI_set_batch_size(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AIDI_start_test__SWIG_0___")]
  public static extern string AIDI_start_test__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AIDI_start_test__SWIG_1___")]
  public static extern void AIDI_start_test__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AIDI_start_test__SWIG_2___")]
  public static extern global::System.IntPtr AIDI_start_test__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AIDI_start_test__SWIG_3___")]
  public static extern void AIDI_start_test__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AIDI_start_test_uchar___")]
  public static extern string AIDI_start_test_uchar(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_AIDIEntrance__SWIG_0___")]
  public static extern global::System.IntPtr new_AIDIEntrance__SWIG_0(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_AIDIEntrance__SWIG_1___")]
  public static extern global::System.IntPtr new_AIDIEntrance__SWIG_1();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_AIDIEntrance___")]
  public static extern void delete_AIDIEntrance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AIDIEntrance_set_model_root___")]
  public static extern void AIDIEntrance_set_model_root(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AIDIEntrance_initialize__SWIG_0___")]
  public static extern void AIDIEntrance_initialize__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AIDIEntrance_initialize__SWIG_1___")]
  public static extern void AIDIEntrance_initialize__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AIDIEntrance_entrance_test_image___")]
  public static extern string AIDIEntrance_entrance_test_image(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_AidiClassify__SWIG_0___")]
  public static extern global::System.IntPtr new_AidiClassify__SWIG_0(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_AidiClassify__SWIG_1___")]
  public static extern global::System.IntPtr new_AidiClassify__SWIG_1();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_AidiClassify___")]
  public static extern void delete_AidiClassify(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiClassify_set_param___")]
  public static extern void AidiClassify_set_param(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiClassify_initial_test_model___")]
  public static extern void AidiClassify_initial_test_model(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiClassify_start_test___")]
  public static extern int AidiClassify_start_test(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_AidiLocation__SWIG_0___")]
  public static extern global::System.IntPtr new_AidiLocation__SWIG_0(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_AidiLocation__SWIG_1___")]
  public static extern global::System.IntPtr new_AidiLocation__SWIG_1();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_AidiLocation___")]
  public static extern void delete_AidiLocation(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiLocation_set_test_data___")]
  public static extern void AidiLocation_set_test_data(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiLocation_set_param___")]
  public static extern bool AidiLocation_set_param(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiLocation_set_score_threshold___")]
  public static extern void AidiLocation_set_score_threshold(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiLocation_set_nms_threshold___")]
  public static extern void AidiLocation_set_nms_threshold(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiLocation_set_test_batches___")]
  public static extern void AidiLocation_set_test_batches(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiLocation_initialize_test_model___")]
  public static extern void AidiLocation_initialize_test_model(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiLocation_start_test___")]
  public static extern void AidiLocation_start_test(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiLocation_get_test_rect___")]
  public static extern global::System.IntPtr AidiLocation_get_test_rect(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_AidiSegment__SWIG_0___")]
  public static extern global::System.IntPtr new_AidiSegment__SWIG_0(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_AidiSegment__SWIG_1___")]
  public static extern global::System.IntPtr new_AidiSegment__SWIG_1();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_AidiSegment___")]
  public static extern void delete_AidiSegment(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiSegment_set_param___")]
  public static extern void AidiSegment_set_param(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiSegment_set_threshold___")]
  public static extern void AidiSegment_set_threshold(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiSegment_set_use_filter___")]
  public static extern void AidiSegment_set_use_filter(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiSegment_set_filter_area___")]
  public static extern void AidiSegment_set_filter_area(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiSegment_set_filter_width___")]
  public static extern void AidiSegment_set_filter_width(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiSegment_set_filter_height___")]
  public static extern void AidiSegment_set_filter_height(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiSegment_set_target_filter_infos___")]
  public static extern void AidiSegment_set_target_filter_infos(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, bool jarg3, int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiSegment_initial_test_model___")]
  public static extern void AidiSegment_initial_test_model(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiSegment_start_test__SWIG_0___")]
  public static extern global::System.IntPtr AidiSegment_start_test__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiSegment_start_test__SWIG_1___")]
  public static extern global::System.IntPtr AidiSegment_start_test__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiSegment_start_test_without_filter__SWIG_0___")]
  public static extern global::System.IntPtr AidiSegment_start_test_without_filter__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiSegment_start_test_without_filter__SWIG_1___")]
  public static extern global::System.IntPtr AidiSegment_start_test_without_filter__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_AidiCalculation___")]
  public static extern global::System.IntPtr new_AidiCalculation();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_AidiCalculation___")]
  public static extern void delete_AidiCalculation(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiCalculation_setIou_thresh___")]
  public static extern void AidiCalculation_setIou_thresh(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiCalculation_set_image_format__SWIG_0___")]
  public static extern void AidiCalculation_set_image_format__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiCalculation_set_image_format__SWIG_1___")]
  public static extern void AidiCalculation_set_image_format__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiCalculation_get_location_result__SWIG_0___")]
  public static extern global::System.IntPtr AidiCalculation_get_location_result__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiCalculation_get_location_result__SWIG_1___")]
  public static extern global::System.IntPtr AidiCalculation_get_location_result__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiCalculation_get_detect_result__SWIG_0___")]
  public static extern global::System.IntPtr AidiCalculation_get_detect_result__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiCalculation_get_detect_result__SWIG_1___")]
  public static extern global::System.IntPtr AidiCalculation_get_detect_result__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiCalculation_get_classify_result__SWIG_0___")]
  public static extern global::System.IntPtr AidiCalculation_get_classify_result__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiCalculation_get_classify_result__SWIG_1___")]
  public static extern global::System.IntPtr AidiCalculation_get_classify_result__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiCalculation_get_feature_location_result___")]
  public static extern global::System.IntPtr AidiCalculation_get_feature_location_result(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiCalculation_get_detection_result___")]
  public static extern global::System.IntPtr AidiCalculation_get_detection_result(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiCalculation_get_detection_result_normal___")]
  public static extern global::System.IntPtr AidiCalculation_get_detection_result_normal(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_AidiSegmentRunner__SWIG_0___")]
  public static extern global::System.IntPtr new_AidiSegmentRunner__SWIG_0(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_AidiSegmentRunner__SWIG_1___")]
  public static extern global::System.IntPtr new_AidiSegmentRunner__SWIG_1();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiSegmentRunner_set_param___")]
  public static extern void AidiSegmentRunner_set_param(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiSegmentRunner_set_use_offset_threshold___")]
  public static extern void AidiSegmentRunner_set_use_offset_threshold(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiSegmentRunner_set_use_filter___")]
  public static extern void AidiSegmentRunner_set_use_filter(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiSegmentRunner_set_threshold___")]
  public static extern void AidiSegmentRunner_set_threshold(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiSegmentRunner_set_filter_area___")]
  public static extern void AidiSegmentRunner_set_filter_area(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiSegmentRunner_set_filter_width___")]
  public static extern void AidiSegmentRunner_set_filter_width(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiSegmentRunner_set_filter_height___")]
  public static extern void AidiSegmentRunner_set_filter_height(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiSegmentRunner_start___")]
  public static extern void AidiSegmentRunner_start(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiSegmentRunner_release___")]
  public static extern void AidiSegmentRunner_release(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiSegmentRunner_set_test_batch_image___")]
  public static extern void AidiSegmentRunner_set_test_batch_image(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiSegmentRunner_get_detect_result___")]
  public static extern global::System.IntPtr AidiSegmentRunner_get_detect_result(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_AidiSegmentRunner___")]
  public static extern void delete_AidiSegmentRunner(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_AidiFactoryRunner__SWIG_0___")]
  public static extern global::System.IntPtr new_AidiFactoryRunner__SWIG_0(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_AidiFactoryRunner__SWIG_1___")]
  public static extern global::System.IntPtr new_AidiFactoryRunner__SWIG_1();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiFactoryRunner_set_param___")]
  public static extern void AidiFactoryRunner_set_param(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiFactoryRunner_start___")]
  public static extern void AidiFactoryRunner_start(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiFactoryRunner_release___")]
  public static extern void AidiFactoryRunner_release(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiFactoryRunner_set_batch_size___")]
  public static extern void AidiFactoryRunner_set_batch_size(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiFactoryRunner_set_test_batch_image___")]
  public static extern void AidiFactoryRunner_set_test_batch_image(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiFactoryRunner_get_detect_result__SWIG_0___")]
  public static extern global::System.IntPtr AidiFactoryRunner_get_detect_result__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiFactoryRunner_get_detect_result__SWIG_1___")]
  public static extern void AidiFactoryRunner_get_detect_result__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_AidiFactoryRunner___")]
  public static extern void delete_AidiFactoryRunner(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_AidiTools___")]
  public static extern global::System.IntPtr new_AidiTools();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_AidiTools___")]
  public static extern void delete_AidiTools(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiTools_get_devices_number___")]
  public static extern int AidiTools_get_devices_number(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiTools_get_xml_info___")]
  public static extern void AidiTools_get_xml_info(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_AidiTools_write_detection_simple_xml___")]
  public static extern void AidiTools_write_detection_simple_xml(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4, string jarg5);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDefect_size_set___")]
  public static extern void BaseDefect_size_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDefect_size_get___")]
  public static extern global::System.IntPtr BaseDefect_size_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDefect_rotate_size_set___")]
  public static extern void BaseDefect_rotate_size_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDefect_rotate_size_get___")]
  public static extern global::System.IntPtr BaseDefect_rotate_size_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDefect_angle_set___")]
  public static extern void BaseDefect_angle_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDefect_angle_get___")]
  public static extern float BaseDefect_angle_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDefect_center_set___")]
  public static extern void BaseDefect_center_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDefect_center_get___")]
  public static extern global::System.IntPtr BaseDefect_center_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDefect_tl_set___")]
  public static extern void BaseDefect_tl_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDefect_tl_get___")]
  public static extern global::System.IntPtr BaseDefect_tl_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDefect_area_set___")]
  public static extern void BaseDefect_area_set(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDefect_area_get___")]
  public static extern double BaseDefect_area_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDefect_type_set___")]
  public static extern void BaseDefect_type_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDefect_type_get___")]
  public static extern int BaseDefect_type_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDefect_type_name_set___")]
  public static extern void BaseDefect_type_name_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDefect_type_name_get___")]
  public static extern string BaseDefect_type_name_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDefect_score_set___")]
  public static extern void BaseDefect_score_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDefect_score_get___")]
  public static extern float BaseDefect_score_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDefect_contours_set___")]
  public static extern void BaseDefect_contours_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDefect_contours_get___")]
  public static extern global::System.IntPtr BaseDefect_contours_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDefect_rect_index_set___")]
  public static extern void BaseDefect_rect_index_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDefect_rect_index_get___")]
  public static extern string BaseDefect_rect_index_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDefect_length_set___")]
  public static extern void BaseDefect_length_set(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDefect_length_get___")]
  public static extern double BaseDefect_length_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_BaseDefect___")]
  public static extern global::System.IntPtr new_BaseDefect();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_BaseDefect___")]
  public static extern void delete_BaseDefect(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDetectResult_source_image_set___")]
  public static extern void BaseDetectResult_source_image_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDetectResult_source_image_get___")]
  public static extern global::System.IntPtr BaseDetectResult_source_image_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDetectResult_result_image_set___")]
  public static extern void BaseDetectResult_result_image_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDetectResult_result_image_get___")]
  public static extern global::System.IntPtr BaseDetectResult_result_image_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDetectResult_defects_set___")]
  public static extern void BaseDetectResult_defects_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDetectResult_defects_get___")]
  public static extern global::System.IntPtr BaseDetectResult_defects_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDetectResult_to_json___")]
  public static extern string BaseDetectResult_to_json(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_BaseDetectResult_from_json___")]
  public static extern void BaseDetectResult_from_json(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_BaseDetectResult___")]
  public static extern global::System.IntPtr new_BaseDetectResult();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_BaseDetectResult___")]
  public static extern void delete_BaseDetectResult(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_all_from_json___")]
  public static extern void all_from_json(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_OCRYesResult_is_ocr_task_set___")]
  public static extern void OCRYesResult_is_ocr_task_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_OCRYesResult_is_ocr_task_get___")]
  public static extern bool OCRYesResult_is_ocr_task_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_OCRYesResult_keep_image_set___")]
  public static extern void OCRYesResult_keep_image_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_OCRYesResult_keep_image_get___")]
  public static extern bool OCRYesResult_keep_image_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_OCRYesResult_result_size_set___")]
  public static extern void OCRYesResult_result_size_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_OCRYesResult_result_size_get___")]
  public static extern int OCRYesResult_result_size_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_OCRYesResult_ocr_str_set___")]
  public static extern void OCRYesResult_ocr_str_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_OCRYesResult_ocr_str_get___")]
  public static extern string OCRYesResult_ocr_str_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_OCRYesResult_date_time_str_set___")]
  public static extern void OCRYesResult_date_time_str_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_OCRYesResult_date_time_str_get___")]
  public static extern string OCRYesResult_date_time_str_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_OCRYesResult_class_num_set___")]
  public static extern void OCRYesResult_class_num_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_OCRYesResult_class_num_get___")]
  public static extern int OCRYesResult_class_num_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_OCRYesResult_class_type_name_set___")]
  public static extern void OCRYesResult_class_type_name_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_OCRYesResult_class_type_name_get___")]
  public static extern string OCRYesResult_class_type_name_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_OCRYesResult_score_set___")]
  public static extern void OCRYesResult_score_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_OCRYesResult_score_get___")]
  public static extern float OCRYesResult_score_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_OCRYesResult_result_img_set___")]
  public static extern void OCRYesResult_result_img_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_OCRYesResult_result_img_get___")]
  public static extern global::System.IntPtr OCRYesResult_result_img_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_new_OCRYesResult___")]
  public static extern global::System.IntPtr new_OCRYesResult();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_delete_OCRYesResult___")]
  public static extern void delete_OCRYesResult(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_endsWith___")]
  public static extern bool endsWith(string jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_startsWith___")]
  public static extern bool startsWith(string jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_str_keep_alnum___")]
  public static extern void str_keep_alnum(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_find_last_n_pox___")]
  public static extern int find_last_n_pox(string jarg1, char jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_is_digit___")]
  public static extern bool is_digit(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_is_date_str___")]
  public static extern string is_date_str(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_is_time_str___")]
  public static extern bool is_time_str(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_is_car_code_str___")]
  public static extern bool is_car_code_str(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_is_date_and_time_str___")]
  public static extern string is_date_and_time_str(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_serialize_str_vec___")]
  public static extern string serialize_str_vec(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_split_str___")]
  public static extern global::System.IntPtr split_str(global::System.Runtime.InteropServices.HandleRef jarg1, char jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_split___")]
  public static extern global::System.IntPtr split(string jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_hex_str___")]
  public static extern string hex_str(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_hex_vector_str___")]
  public static extern string hex_vector_str(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_print_hex___")]
  public static extern void print_hex(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_exists___")]
  public static extern bool exists(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_ensure_dir___")]
  public static extern bool ensure_dir(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_father_directory_pos___")]
  public static extern void father_directory_pos(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_write_str___")]
  public static extern void write_str(string jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_read_str___")]
  public static extern string read_str(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_write_str_append___")]
  public static extern void write_str_append(string jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_read_csv___")]
  public static extern global::System.IntPtr read_csv(string jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_write_csv___")]
  public static extern void write_csv(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_cn_str___")]
  public static extern string cn_str(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_inv_cn_str___")]
  public static extern string inv_cn_str(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_str_to_qstr___")]
  public static extern global::System.IntPtr str_to_qstr(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_qstr_to_str___")]
  public static extern string qstr_to_str(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_parse_factory_module_by_path___")]
  public static extern bool parse_factory_module_by_path(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_label_from_json___")]
  public static extern void get_label_from_json(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_label_from_xml__SWIG_0___")]
  public static extern void get_label_from_xml__SWIG_0(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_label_from_xml__SWIG_1___")]
  public static extern void get_label_from_xml__SWIG_1(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_write_location_simple_xml___")]
  public static extern void write_location_simple_xml(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_write_detection_simple_xml___")]
  public static extern void write_detection_simple_xml(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_write_classify_json___")]
  public static extern void write_classify_json(int jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_single_location___")]
  public static extern global::System.IntPtr get_single_location(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_single_train_label___")]
  public static extern int get_single_train_label(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_single_location_labels___")]
  public static extern void get_single_location_labels(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_random_split_indexes__SWIG_0___")]
  public static extern void random_split_indexes__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_random_split_indexes__SWIG_1___")]
  public static extern void random_split_indexes__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_indexes_from_json___")]
  public static extern void get_indexes_from_json(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_write_indexes_to_json___")]
  public static extern void write_indexes_to_json(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_label_dict_to_json_value___")]
  public static extern void label_dict_to_json_value(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_json_value_to_label_dict___")]
  public static extern void json_value_to_label_dict(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_json_value_to_label_dict_reverse___")]
  public static extern void json_value_to_label_dict_reverse(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_classify_train_indexs___")]
  public static extern global::System.IntPtr get_classify_train_indexs(string jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_segment_train_indexs___")]
  public static extern global::System.IntPtr get_segment_train_indexs(string jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_location_train_indexs___")]
  public static extern global::System.IntPtr get_location_train_indexs(string jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_classify_train_indexs_fast___")]
  public static extern void get_classify_train_indexs_fast(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_segment_train_indexs_fast__SWIG_0___")]
  public static extern void get_segment_train_indexs_fast__SWIG_0(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_segment_train_indexs_fast__SWIG_1___")]
  public static extern void get_segment_train_indexs_fast__SWIG_1(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_location_train_indexs_fast___")]
  public static extern void get_location_train_indexs_fast(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_feature_location_train_indexs_fast___")]
  public static extern void get_feature_location_train_indexs_fast(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_dir_filenames___")]
  public static extern int get_dir_filenames(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_classify_label_cache___")]
  public static extern void get_classify_label_cache(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_location_label_cache___")]
  public static extern void get_location_label_cache(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_transform_mask_to_rect_label__SWIG_0___")]
  public static extern void transform_mask_to_rect_label__SWIG_0(string jarg1, int jarg2, string jarg3, string jarg4, int jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_transform_mask_to_rect_label__SWIG_1___")]
  public static extern void transform_mask_to_rect_label__SWIG_1(string jarg1, int jarg2, string jarg3, string jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_transform_mask_to_rect_label__SWIG_2___")]
  public static extern void transform_mask_to_rect_label__SWIG_2(string jarg1, int jarg2, string jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_generate_color_map_s___")]
  public static extern global::System.IntPtr generate_color_map_s(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_img_color2bit___")]
  public static extern void img_color2bit(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_generate_color_vector_bgr_i___")]
  public static extern void generate_color_vector_bgr_i(int jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_img_bit2color___")]
  public static extern void img_bit2color(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_label2rgb___")]
  public static extern void label2rgb(int jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_generate_color_map_i___")]
  public static extern global::System.IntPtr generate_color_map_i(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_parse_map___")]
  public static extern global::System.IntPtr parse_map(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_img_bit2color_slow___")]
  public static extern void img_bit2color_slow(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_img_bit2color____")]
  public static extern void img_bit2color_(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_xml_dom___")]
  public static extern bool get_xml_dom(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_xml_info___")]
  public static extern void get_xml_info(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_gen_label_dict_from_xml_folder___")]
  public static extern void gen_label_dict_from_xml_folder(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_geometry_info_from_xml___")]
  public static extern void get_geometry_info_from_xml(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_mask_info_from_xml__SWIG_0___")]
  public static extern void get_mask_info_from_xml__SWIG_0(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_mask_info_from_xml__SWIG_1___")]
  public static extern void get_mask_info_from_xml__SWIG_1(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_label2color___")]
  public static extern void label2color(int jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_label2color_complex___")]
  public static extern void label2color_complex(int jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_acquire_result_info_from_predict__SWIG_0___")]
  public static extern void acquire_result_info_from_predict__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_acquire_result_info_from_predict__SWIG_1___")]
  public static extern void acquire_result_info_from_predict__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_transfer_colormat_from_predict___")]
  public static extern void transfer_colormat_from_predict(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_transfer_colormat_3_from_predict___")]
  public static extern void transfer_colormat_3_from_predict(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_draw_mask_in_source_image__SWIG_0___")]
  public static extern void draw_mask_in_source_image__SWIG_0(string jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_draw_mask_in_source_image__SWIG_1___")]
  public static extern void draw_mask_in_source_image__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_draw_bbox_in_source_image__SWIG_0___")]
  public static extern void draw_bbox_in_source_image__SWIG_0(string jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_draw_bbox_in_source_image__SWIG_1___")]
  public static extern void draw_bbox_in_source_image__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_batch_png2bmp___")]
  public static extern void batch_png2bmp(string jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_batch_bmp2png___")]
  public static extern void batch_bmp2png(string jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_write_bmp___")]
  public static extern void write_bmp(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_read_bmp___")]
  public static extern void read_bmp(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_save_array___")]
  public static extern bool save_array(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_load_array___")]
  public static extern bool load_array(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_test_array___")]
  public static extern void test_array();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_write_float___")]
  public static extern void write_float(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_save_results_to_file___")]
  public static extern void save_results_to_file(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_change_single_proto_label_number___")]
  public static extern void change_single_proto_label_number(string jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_save_net_param_to_file___")]
  public static extern void save_net_param_to_file(string jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_check_binary_weights___")]
  public static extern void check_binary_weights(string jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_debug_weights_to_files___")]
  public static extern void debug_weights_to_files(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_debug_blob_to_file__SWIG_0___")]
  public static extern void debug_blob_to_file__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_debug_blob_to_file__SWIG_1___")]
  public static extern void debug_blob_to_file__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_debug_blob_info___")]
  public static extern void debug_blob_info(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_print_comtrastive_vectors___")]
  public static extern void print_comtrastive_vectors(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_print_rect___")]
  public static extern void print_rect(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_mask_image_in_place___")]
  public static extern void mask_image_in_place(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_mask_image_with_clone___")]
  public static extern void mask_image_with_clone(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_transform_image_color___")]
  public static extern void transform_image_color(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_convert_float_and_substract_mean_mat___")]
  public static extern void convert_float_and_substract_mean_mat(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_gpu_info___")]
  public static extern global::System.IntPtr get_gpu_info(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_gpus__SWIG_0___")]
  public static extern void get_gpus__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_gpus__SWIG_1___")]
  public static extern void get_gpus__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_cluster_gpus__SWIG_0___")]
  public static extern void get_cluster_gpus__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_cluster_gpus__SWIG_1___")]
  public static extern void get_cluster_gpus__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_gpu_memory___")]
  public static extern void get_gpu_memory(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_memory___")]
  public static extern void get_memory(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_sample_uniform_int__SWIG_0___")]
  public static extern int sample_uniform_int__SWIG_0(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_sample_uniform_int__SWIG_1___")]
  public static extern int sample_uniform_int__SWIG_1(int jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_sample_uniform_double___")]
  public static extern double sample_uniform_double(double jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_sample_normal_double___")]
  public static extern double sample_normal_double(double jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_clip_boxes___")]
  public static extern void clip_boxes(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_alarm_model_miss___")]
  public static extern void alarm_model_miss();

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_shuffle_index___")]
  public static extern global::System.IntPtr shuffle_index(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_brightness_augment___")]
  public static extern void brightness_augment(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_split_image___")]
  public static extern global::System.IntPtr split_image(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_desplit_image___")]
  public static extern global::System.IntPtr desplit_image(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_rotate_image__SWIG_0___")]
  public static extern void rotate_image__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_rotate_image__SWIG_1___")]
  public static extern void rotate_image__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_rotate_image__SWIG_2___")]
  public static extern void rotate_image__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_count_diff_pixels___")]
  public static extern int count_diff_pixels(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_images_mean_value_bgr__SWIG_0___")]
  public static extern global::System.IntPtr get_images_mean_value_bgr__SWIG_0(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_images_mean_value_bgr__SWIG_1___")]
  public static extern global::System.IntPtr get_images_mean_value_bgr__SWIG_1(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_change_bn_engine_caffe___")]
  public static extern void change_bn_engine_caffe(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_change_bn_sync_gpus__SWIG_0___")]
  public static extern void change_bn_sync_gpus__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_change_bn_sync_gpus__SWIG_1___")]
  public static extern void change_bn_sync_gpus__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_layer_index_by_name___")]
  public static extern int get_layer_index_by_name(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_wrap_output_layer_single_channel__SWIG_0___")]
  public static extern void wrap_output_layer_single_channel__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_wrap_output_layer_single_channel__SWIG_1___")]
  public static extern void wrap_output_layer_single_channel__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_wrap_output_layer_single_channel_segment__SWIG_0___")]
  public static extern void wrap_output_layer_single_channel_segment__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4, float jarg5);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_wrap_output_layer_single_channel_segment__SWIG_1___")]
  public static extern void wrap_output_layer_single_channel_segment__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_wrap_output_layer_single_channel_segment__SWIG_2___")]
  public static extern void wrap_output_layer_single_channel_segment__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_wrap_output_layer_single_channel_segment__SWIG_3___")]
  public static extern void wrap_output_layer_single_channel_segment__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_wrap_output_layer_all_channels___")]
  public static extern void wrap_output_layer_all_channels(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_fill_32fc1_mat_with_const_ptr___")]
  public static extern void fill_32fc1_mat_with_const_ptr(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_random_shift_image___")]
  public static extern void random_shift_image(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3, float jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_shift_image___")]
  public static extern void shift_image(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("aidi_vision_client", EntryPoint="CSharp_aqrosefaidi_vision_client_get_contours_for_given_value___")]
  public static extern void get_contours_for_given_value(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, int jarg10);
}

}
namespace aqrose.aidi_vision_client {

public class aidi_vision_client {
  public static void all_from_json(string json, SWIGTYPE_p_std__vectorT_aq__BaseDetectResult_t results) {
    aidi_vision_clientPINVOKE.all_from_json(json, SWIGTYPE_p_std__vectorT_aq__BaseDetectResult_t.getCPtr(results));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool endsWith(string s, string suffix) {
    bool ret = aidi_vision_clientPINVOKE.endsWith(s, suffix);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool startsWith(string s, string prefix) {
    bool ret = aidi_vision_clientPINVOKE.startsWith(s, prefix);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void str_keep_alnum(SWIGTYPE_p_std__string str) {
    aidi_vision_clientPINVOKE.str_keep_alnum(SWIGTYPE_p_std__string.getCPtr(str));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int find_last_n_pox(string s, char c, int count) {
    int ret = aidi_vision_clientPINVOKE.find_last_n_pox(s, c, count);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool is_digit(string s) {
    bool ret = aidi_vision_clientPINVOKE.is_digit(s);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string is_date_str(string s, SWIGTYPE_p_bool flag) {
    string ret = aidi_vision_clientPINVOKE.is_date_str(s, SWIGTYPE_p_bool.getCPtr(flag));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool is_time_str(string s) {
    bool ret = aidi_vision_clientPINVOKE.is_time_str(s);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool is_car_code_str(string s) {
    bool ret = aidi_vision_clientPINVOKE.is_car_code_str(s);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string is_date_and_time_str(string s, SWIGTYPE_p_bool flag) {
    string ret = aidi_vision_clientPINVOKE.is_date_and_time_str(s, SWIGTYPE_p_bool.getCPtr(flag));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string serialize_str_vec(StringVector vs) {
    string ret = aidi_vision_clientPINVOKE.serialize_str_vec(StringVector.getCPtr(vs));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IntVector split_str(SWIGTYPE_p_std__string s, char delim) {
    IntVector ret = new IntVector(aidi_vision_clientPINVOKE.split_str(SWIGTYPE_p_std__string.getCPtr(s), delim), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringVector split(string str, string delim) {
    StringVector ret = new StringVector(aidi_vision_clientPINVOKE.split(str, delim), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string hex_str(SWIGTYPE_p_unsigned_char data, int len) {
    string ret = aidi_vision_clientPINVOKE.hex_str(SWIGTYPE_p_unsigned_char.getCPtr(data), len);
    return ret;
  }

  public static string hex_vector_str(SWIGTYPE_p_unsigned_char data, int len) {
    string ret = aidi_vision_clientPINVOKE.hex_vector_str(SWIGTYPE_p_unsigned_char.getCPtr(data), len);
    return ret;
  }

  public static void print_hex(string msg, SWIGTYPE_p_uint8_t data, int len) {
    aidi_vision_clientPINVOKE.print_hex(msg, SWIGTYPE_p_uint8_t.getCPtr(data), len);
  }

  public static bool exists(string filename) {
    bool ret = aidi_vision_clientPINVOKE.exists(filename);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ensure_dir(string dirname) {
    bool ret = aidi_vision_clientPINVOKE.ensure_dir(dirname);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void father_directory_pos(string path, SWIGTYPE_p_int right_pos) {
    aidi_vision_clientPINVOKE.father_directory_pos(path, SWIGTYPE_p_int.getCPtr(right_pos));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void write_str(string stra, string filename) {
    aidi_vision_clientPINVOKE.write_str(stra, filename);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string read_str(string filename) {
    string ret = aidi_vision_clientPINVOKE.read_str(filename);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void write_str_append(string stra, string filename) {
    aidi_vision_clientPINVOKE.write_str_append(stra, filename);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_cv__Mat read_csv(string filepath, int opencv_type) {
    SWIGTYPE_p_cv__Mat ret = new SWIGTYPE_p_cv__Mat(aidi_vision_clientPINVOKE.read_csv(filepath, opencv_type), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void write_csv(string filename, SWIGTYPE_p_cv__Mat mat) {
    aidi_vision_clientPINVOKE.write_csv(filename, SWIGTYPE_p_cv__Mat.getCPtr(mat));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string cn_str(string stra) {
    string ret = aidi_vision_clientPINVOKE.cn_str(stra);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string inv_cn_str(string stra) {
    string ret = aidi_vision_clientPINVOKE.inv_cn_str(stra);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_QString str_to_qstr(string str) {
    SWIGTYPE_p_QString ret = new SWIGTYPE_p_QString(aidi_vision_clientPINVOKE.str_to_qstr(str), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string qstr_to_str(SWIGTYPE_p_QString qstr) {
    string ret = aidi_vision_clientPINVOKE.qstr_to_str(SWIGTYPE_p_QString.getCPtr(qstr));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool parse_factory_module_by_path(string root_path, StringVector save_model_path_list, StringVector operator_name_list, StringVector operator_type_list) {
    bool ret = aidi_vision_clientPINVOKE.parse_factory_module_by_path(root_path, StringVector.getCPtr(save_model_path_list), StringVector.getCPtr(operator_name_list), StringVector.getCPtr(operator_type_list));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void get_label_from_json(string file_path, SWIGTYPE_p_int label) {
    aidi_vision_clientPINVOKE.get_label_from_json(file_path, SWIGTYPE_p_int.getCPtr(label));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void get_label_from_xml(string file_path, SWIGTYPE_p_std__vectorT_cv__Rect_t roi) {
    aidi_vision_clientPINVOKE.get_label_from_xml__SWIG_0(file_path, SWIGTYPE_p_std__vectorT_cv__Rect_t.getCPtr(roi));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void get_label_from_xml(string file_path, VecFloatVector boxes) {
    aidi_vision_clientPINVOKE.get_label_from_xml__SWIG_1(file_path, VecFloatVector.getCPtr(boxes));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void write_location_simple_xml(VecFloatVector boxs, int index, string dst_dir) {
    aidi_vision_clientPINVOKE.write_location_simple_xml(VecFloatVector.getCPtr(boxs), index, dst_dir);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void write_detection_simple_xml(VecFloatVector boxs, StringVector labels, int index, string dst_dir) {
    aidi_vision_clientPINVOKE.write_detection_simple_xml(VecFloatVector.getCPtr(boxs), StringVector.getCPtr(labels), index, dst_dir);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void write_classify_json(int pred, int index, string dst_dir) {
    aidi_vision_clientPINVOKE.write_classify_json(pred, index, dst_dir);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_std__vectorT_cv__Rect_t get_single_location(string location_file) {
    SWIGTYPE_p_std__vectorT_cv__Rect_t ret = new SWIGTYPE_p_std__vectorT_cv__Rect_t(aidi_vision_clientPINVOKE.get_single_location(location_file), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int get_single_train_label(string json_path) {
    int ret = aidi_vision_clientPINVOKE.get_single_train_label(json_path);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void get_single_location_labels(string location_file, SWIGTYPE_p_std__vectorT_cv__Rect_t rects, StringVector labels) {
    aidi_vision_clientPINVOKE.get_single_location_labels(location_file, SWIGTYPE_p_std__vectorT_cv__Rect_t.getCPtr(rects), StringVector.getCPtr(labels));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void random_split_indexes(IntVector indexes, IntVector train_idxs, IntVector test_idxs, float train_ratio) {
    aidi_vision_clientPINVOKE.random_split_indexes__SWIG_0(IntVector.getCPtr(indexes), IntVector.getCPtr(train_idxs), IntVector.getCPtr(test_idxs), train_ratio);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void random_split_indexes(IntVector indexes, IntVector train_idxs, IntVector test_idxs) {
    aidi_vision_clientPINVOKE.random_split_indexes__SWIG_1(IntVector.getCPtr(indexes), IntVector.getCPtr(train_idxs), IntVector.getCPtr(test_idxs));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void get_indexes_from_json(string file_path, IntVector train_idxs, IntVector test_idxs) {
    aidi_vision_clientPINVOKE.get_indexes_from_json(file_path, IntVector.getCPtr(train_idxs), IntVector.getCPtr(test_idxs));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void write_indexes_to_json(string file_path, IntVector train_idxs, IntVector test_idxs) {
    aidi_vision_clientPINVOKE.write_indexes_to_json(file_path, IntVector.getCPtr(train_idxs), IntVector.getCPtr(test_idxs));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void label_dict_to_json_value(SWIGTYPE_p_std__unordered_mapT_std__string_int_t label_dict, SWIGTYPE_p_Json__Value json_object) {
    aidi_vision_clientPINVOKE.label_dict_to_json_value(SWIGTYPE_p_std__unordered_mapT_std__string_int_t.getCPtr(label_dict), SWIGTYPE_p_Json__Value.getCPtr(json_object));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void json_value_to_label_dict(SWIGTYPE_p_Json__Value json_object, SWIGTYPE_p_std__unordered_mapT_std__string_int_t label_dict) {
    aidi_vision_clientPINVOKE.json_value_to_label_dict(SWIGTYPE_p_Json__Value.getCPtr(json_object), SWIGTYPE_p_std__unordered_mapT_std__string_int_t.getCPtr(label_dict));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void json_value_to_label_dict_reverse(SWIGTYPE_p_Json__Value json_object, SWIGTYPE_p_std__unordered_mapT_int_std__string_t label_dict) {
    aidi_vision_clientPINVOKE.json_value_to_label_dict_reverse(SWIGTYPE_p_Json__Value.getCPtr(json_object), SWIGTYPE_p_std__unordered_mapT_int_std__string_t.getCPtr(label_dict));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static IntVector get_classify_train_indexs(string source_folder, string label_folder) {
    IntVector ret = new IntVector(aidi_vision_clientPINVOKE.get_classify_train_indexs(source_folder, label_folder), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IntVector get_segment_train_indexs(string source_folder, string label_folder) {
    IntVector ret = new IntVector(aidi_vision_clientPINVOKE.get_segment_train_indexs(source_folder, label_folder), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IntVector get_location_train_indexs(string source_folder, string label_folder) {
    IntVector ret = new IntVector(aidi_vision_clientPINVOKE.get_location_train_indexs(source_folder, label_folder), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void get_classify_train_indexs_fast(string label_folder, IntVector train_indexs) {
    aidi_vision_clientPINVOKE.get_classify_train_indexs_fast(label_folder, IntVector.getCPtr(train_indexs));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void get_segment_train_indexs_fast(string label_folder, IntVector train_indexs, string img_format) {
    aidi_vision_clientPINVOKE.get_segment_train_indexs_fast__SWIG_0(label_folder, IntVector.getCPtr(train_indexs), img_format);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void get_segment_train_indexs_fast(string label_folder, IntVector train_indexs) {
    aidi_vision_clientPINVOKE.get_segment_train_indexs_fast__SWIG_1(label_folder, IntVector.getCPtr(train_indexs));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void get_location_train_indexs_fast(string label_folder, IntVector train_indexs) {
    aidi_vision_clientPINVOKE.get_location_train_indexs_fast(label_folder, IntVector.getCPtr(train_indexs));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void get_feature_location_train_indexs_fast(string label_folder, IntVector train_indexs) {
    aidi_vision_clientPINVOKE.get_feature_location_train_indexs_fast(label_folder, IntVector.getCPtr(train_indexs));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int get_dir_filenames(string dirname, StringVector filenames) {
    int ret = aidi_vision_clientPINVOKE.get_dir_filenames(dirname, StringVector.getCPtr(filenames));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void get_classify_label_cache(string label_folder, IntVector train_indexs, SWIGTYPE_p_std__unordered_mapT_int_int_t label_table) {
    aidi_vision_clientPINVOKE.get_classify_label_cache(label_folder, IntVector.getCPtr(train_indexs), SWIGTYPE_p_std__unordered_mapT_int_int_t.getCPtr(label_table));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void get_location_label_cache(string label_folder, IntVector train_indexs, SWIGTYPE_p_std__unordered_mapT_int_std__vectorT_cv__Rect_t_t rois_table) {
    aidi_vision_clientPINVOKE.get_location_label_cache(label_folder, IntVector.getCPtr(train_indexs), SWIGTYPE_p_std__unordered_mapT_int_std__vectorT_cv__Rect_t_t.getCPtr(rois_table));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void transform_mask_to_rect_label(string src_dir, int index, string label_name, string dst_dir, int thresh_w, int thresh_h) {
    aidi_vision_clientPINVOKE.transform_mask_to_rect_label__SWIG_0(src_dir, index, label_name, dst_dir, thresh_w, thresh_h);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void transform_mask_to_rect_label(string src_dir, int index, string label_name, string dst_dir, int thresh_w) {
    aidi_vision_clientPINVOKE.transform_mask_to_rect_label__SWIG_1(src_dir, index, label_name, dst_dir, thresh_w);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void transform_mask_to_rect_label(string src_dir, int index, string label_name, string dst_dir) {
    aidi_vision_clientPINVOKE.transform_mask_to_rect_label__SWIG_2(src_dir, index, label_name, dst_dir);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_std__unordered_mapT_std__string_int_t generate_color_map_s(int num) {
    SWIGTYPE_p_std__unordered_mapT_std__string_int_t ret = new SWIGTYPE_p_std__unordered_mapT_std__string_int_t(aidi_vision_clientPINVOKE.generate_color_map_s(num), true);
    return ret;
  }

  public static void img_color2bit(SWIGTYPE_p_cv__Mat color_img, SWIGTYPE_p_std__unordered_mapT_std__string_int_t color_map_s, SWIGTYPE_p_cv__Mat bit_img) {
    aidi_vision_clientPINVOKE.img_color2bit(SWIGTYPE_p_cv__Mat.getCPtr(color_img), SWIGTYPE_p_std__unordered_mapT_std__string_int_t.getCPtr(color_map_s), SWIGTYPE_p_cv__Mat.getCPtr(bit_img));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void generate_color_vector_bgr_i(int num, SWIGTYPE_p_std__vectorT_uchar_t vecb, SWIGTYPE_p_std__vectorT_uchar_t vecg, SWIGTYPE_p_std__vectorT_uchar_t vecr) {
    aidi_vision_clientPINVOKE.generate_color_vector_bgr_i(num, SWIGTYPE_p_std__vectorT_uchar_t.getCPtr(vecb), SWIGTYPE_p_std__vectorT_uchar_t.getCPtr(vecg), SWIGTYPE_p_std__vectorT_uchar_t.getCPtr(vecr));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void img_bit2color(SWIGTYPE_p_cv__Mat bit_img, SWIGTYPE_p_std__vectorT_uchar_t vecb, SWIGTYPE_p_std__vectorT_uchar_t vecg, SWIGTYPE_p_std__vectorT_uchar_t vecr, SWIGTYPE_p_cv__Mat color_img) {
    aidi_vision_clientPINVOKE.img_bit2color(SWIGTYPE_p_cv__Mat.getCPtr(bit_img), SWIGTYPE_p_std__vectorT_uchar_t.getCPtr(vecb), SWIGTYPE_p_std__vectorT_uchar_t.getCPtr(vecg), SWIGTYPE_p_std__vectorT_uchar_t.getCPtr(vecr), SWIGTYPE_p_cv__Mat.getCPtr(color_img));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void label2rgb(int label, SWIGTYPE_p_int r, SWIGTYPE_p_int g, SWIGTYPE_p_int b) {
    aidi_vision_clientPINVOKE.label2rgb(label, SWIGTYPE_p_int.getCPtr(r), SWIGTYPE_p_int.getCPtr(g), SWIGTYPE_p_int.getCPtr(b));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_std__unordered_mapT_int_std__string_t generate_color_map_i(int num) {
    SWIGTYPE_p_std__unordered_mapT_int_std__string_t ret = new SWIGTYPE_p_std__unordered_mapT_int_std__string_t(aidi_vision_clientPINVOKE.generate_color_map_i(num), true);
    return ret;
  }

  public static SWIGTYPE_p_std__unordered_mapT_std__string_int_t parse_map(string json_path) {
    SWIGTYPE_p_std__unordered_mapT_std__string_int_t ret = new SWIGTYPE_p_std__unordered_mapT_std__string_int_t(aidi_vision_clientPINVOKE.parse_map(json_path), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void img_bit2color_slow(SWIGTYPE_p_cv__Mat bit_img, SWIGTYPE_p_std__unordered_mapT_int_std__string_t color_map_i, SWIGTYPE_p_cv__Mat color_img) {
    aidi_vision_clientPINVOKE.img_bit2color_slow(SWIGTYPE_p_cv__Mat.getCPtr(bit_img), SWIGTYPE_p_std__unordered_mapT_int_std__string_t.getCPtr(color_map_i), SWIGTYPE_p_cv__Mat.getCPtr(color_img));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void img_bit2color_(SWIGTYPE_p_cv__Mat bit_img, SWIGTYPE_p_std__unordered_mapT_int_std__string_t color_map_i, SWIGTYPE_p_cv__Mat color_img) {
    aidi_vision_clientPINVOKE.img_bit2color_(SWIGTYPE_p_cv__Mat.getCPtr(bit_img), SWIGTYPE_p_std__unordered_mapT_int_std__string_t.getCPtr(color_map_i), SWIGTYPE_p_cv__Mat.getCPtr(color_img));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool get_xml_dom(string file_path, SWIGTYPE_p_QDomElement dom) {
    bool ret = aidi_vision_clientPINVOKE.get_xml_dom(file_path, SWIGTYPE_p_QDomElement.getCPtr(dom));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void get_xml_info(string file_path, StringVector labels, SWIGTYPE_p_std__vectorT_cv__Rect_t rect_result, FloatVector scores) {
    aidi_vision_clientPINVOKE.get_xml_info(file_path, StringVector.getCPtr(labels), SWIGTYPE_p_std__vectorT_cv__Rect_t.getCPtr(rect_result), FloatVector.getCPtr(scores));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void gen_label_dict_from_xml_folder(string xml_foler, SWIGTYPE_p_int num_total, SWIGTYPE_p_std__unordered_mapT_std__string_int_t label_dict) {
    aidi_vision_clientPINVOKE.gen_label_dict_from_xml_folder(xml_foler, SWIGTYPE_p_int.getCPtr(num_total), SWIGTYPE_p_std__unordered_mapT_std__string_int_t.getCPtr(label_dict));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void get_geometry_info_from_xml(string xml_path, IntVector geometry_info) {
    aidi_vision_clientPINVOKE.get_geometry_info_from_xml(xml_path, IntVector.getCPtr(geometry_info));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void get_mask_info_from_xml(string file_path, SWIGTYPE_p_std__unordered_mapT_std__string_int_t label_dict, VecIntVector mask_info) {
    aidi_vision_clientPINVOKE.get_mask_info_from_xml__SWIG_0(file_path, SWIGTYPE_p_std__unordered_mapT_std__string_int_t.getCPtr(label_dict), VecIntVector.getCPtr(mask_info));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void get_mask_info_from_xml(string file_path, VecIntVector mask_info, VecStringVector label_name_info) {
    aidi_vision_clientPINVOKE.get_mask_info_from_xml__SWIG_1(file_path, VecIntVector.getCPtr(mask_info), VecStringVector.getCPtr(label_name_info));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void label2color(int predict, int num_total, SWIGTYPE_p_int color) {
    aidi_vision_clientPINVOKE.label2color(predict, num_total, SWIGTYPE_p_int.getCPtr(color));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void label2color_complex(int predict, int num_total, SWIGTYPE_p_int b, SWIGTYPE_p_int g, SWIGTYPE_p_int r) {
    aidi_vision_clientPINVOKE.label2color_complex(predict, num_total, SWIGTYPE_p_int.getCPtr(b), SWIGTYPE_p_int.getCPtr(g), SWIGTYPE_p_int.getCPtr(r));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void acquire_result_info_from_predict(SWIGTYPE_p_cv__Mat one_channel, int diameter, VecIntVector result_info, SWIGTYPE_p_cv__Mat three_channel, int least_pixels) {
    aidi_vision_clientPINVOKE.acquire_result_info_from_predict__SWIG_0(SWIGTYPE_p_cv__Mat.getCPtr(one_channel), diameter, VecIntVector.getCPtr(result_info), SWIGTYPE_p_cv__Mat.getCPtr(three_channel), least_pixels);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void acquire_result_info_from_predict(SWIGTYPE_p_cv__Mat one_channel, int diameter, VecIntVector result_info, SWIGTYPE_p_cv__Mat three_channel) {
    aidi_vision_clientPINVOKE.acquire_result_info_from_predict__SWIG_1(SWIGTYPE_p_cv__Mat.getCPtr(one_channel), diameter, VecIntVector.getCPtr(result_info), SWIGTYPE_p_cv__Mat.getCPtr(three_channel));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void transfer_colormat_from_predict(SWIGTYPE_p_cv__Mat one_channel, int num_total) {
    aidi_vision_clientPINVOKE.transfer_colormat_from_predict(SWIGTYPE_p_cv__Mat.getCPtr(one_channel), num_total);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void transfer_colormat_3_from_predict(SWIGTYPE_p_cv__Mat one_channel, SWIGTYPE_p_cv__Mat three_channel, int num_total) {
    aidi_vision_clientPINVOKE.transfer_colormat_3_from_predict(SWIGTYPE_p_cv__Mat.getCPtr(one_channel), SWIGTYPE_p_cv__Mat.getCPtr(three_channel), num_total);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void draw_mask_in_source_image(string source_path, string mask_path, string dst_path) {
    aidi_vision_clientPINVOKE.draw_mask_in_source_image__SWIG_0(source_path, mask_path, dst_path);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void draw_mask_in_source_image(SWIGTYPE_p_cv__Mat source_image, SWIGTYPE_p_cv__Mat mask, string dst_path) {
    aidi_vision_clientPINVOKE.draw_mask_in_source_image__SWIG_1(SWIGTYPE_p_cv__Mat.getCPtr(source_image), SWIGTYPE_p_cv__Mat.getCPtr(mask), dst_path);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void draw_bbox_in_source_image(string source_path, string bbox_path, string dst_path) {
    aidi_vision_clientPINVOKE.draw_bbox_in_source_image__SWIG_0(source_path, bbox_path, dst_path);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void draw_bbox_in_source_image(SWIGTYPE_p_cv__Mat source_image, SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_float_t_t_t bboxs, string dst_path) {
    aidi_vision_clientPINVOKE.draw_bbox_in_source_image__SWIG_1(SWIGTYPE_p_cv__Mat.getCPtr(source_image), SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_float_t_t_t.getCPtr(bboxs), dst_path);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void batch_png2bmp(string src_path, string dst_path) {
    aidi_vision_clientPINVOKE.batch_png2bmp(src_path, dst_path);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void batch_bmp2png(string src_path, string dst_path) {
    aidi_vision_clientPINVOKE.batch_bmp2png(src_path, dst_path);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void write_bmp(string dst_path, SWIGTYPE_p_std__vectorT_cv__Mat_t images) {
    aidi_vision_clientPINVOKE.write_bmp(dst_path, SWIGTYPE_p_std__vectorT_cv__Mat_t.getCPtr(images));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void read_bmp(string src_path, SWIGTYPE_p_std__vectorT_cv__Mat_t images) {
    aidi_vision_clientPINVOKE.read_bmp(src_path, SWIGTYPE_p_std__vectorT_cv__Mat_t.getCPtr(images));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool save_array(SWIGTYPE_p_double pdata, uint length, string file_path) {
    bool ret = aidi_vision_clientPINVOKE.save_array(SWIGTYPE_p_double.getCPtr(pdata), length, file_path);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool load_array(SWIGTYPE_p_double pdata, uint length, string file_path) {
    bool ret = aidi_vision_clientPINVOKE.load_array(SWIGTYPE_p_double.getCPtr(pdata), length, file_path);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void test_array() {
    aidi_vision_clientPINVOKE.test_array();
  }

  public static void write_float(string dst_path, SWIGTYPE_p_float begin, int len) {
    aidi_vision_clientPINVOKE.write_float(dst_path, SWIGTYPE_p_float.getCPtr(begin), len);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void save_results_to_file(StringVector results, string dirpath) {
    aidi_vision_clientPINVOKE.save_results_to_file(StringVector.getCPtr(results), dirpath);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void change_single_proto_label_number(string proto_path, int label_number, string flag) {
    aidi_vision_clientPINVOKE.change_single_proto_label_number(proto_path, label_number, flag);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void save_net_param_to_file(string stra, string filepath) {
    aidi_vision_clientPINVOKE.save_net_param_to_file(stra, filepath);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void check_binary_weights(string binary_path, string out_text_path) {
    aidi_vision_clientPINVOKE.check_binary_weights(binary_path, out_text_path);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void debug_weights_to_files(SWIGTYPE_p_caffe__NetParameter param, string debug_folder) {
    aidi_vision_clientPINVOKE.debug_weights_to_files(SWIGTYPE_p_caffe__NetParameter.getCPtr(param), debug_folder);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void debug_blob_to_file(SWIGTYPE_p_caffe__BlobT_float_t blob, string blob_fname, bool write_diff) {
    aidi_vision_clientPINVOKE.debug_blob_to_file__SWIG_0(SWIGTYPE_p_caffe__BlobT_float_t.getCPtr(blob), blob_fname, write_diff);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void debug_blob_to_file(SWIGTYPE_p_caffe__BlobT_float_t blob, string blob_fname) {
    aidi_vision_clientPINVOKE.debug_blob_to_file__SWIG_1(SWIGTYPE_p_caffe__BlobT_float_t.getCPtr(blob), blob_fname);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void debug_blob_info(SWIGTYPE_p_caffe__BlobT_float_t feature_maps) {
    aidi_vision_clientPINVOKE.debug_blob_info(SWIGTYPE_p_caffe__BlobT_float_t.getCPtr(feature_maps));
  }

  public static void print_comtrastive_vectors(IntVector va, IntVector vb) {
    aidi_vision_clientPINVOKE.print_comtrastive_vectors(IntVector.getCPtr(va), IntVector.getCPtr(vb));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void print_rect(SWIGTYPE_p_cv__Rect rect) {
    aidi_vision_clientPINVOKE.print_rect(SWIGTYPE_p_cv__Rect.getCPtr(rect));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void mask_image_in_place(SWIGTYPE_p_cv__Mat source, SWIGTYPE_p_cv__Mat mask) {
    aidi_vision_clientPINVOKE.mask_image_in_place(SWIGTYPE_p_cv__Mat.getCPtr(source), SWIGTYPE_p_cv__Mat.getCPtr(mask));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void mask_image_with_clone(SWIGTYPE_p_cv__Mat source, SWIGTYPE_p_cv__Mat mask, SWIGTYPE_p_cv__Mat result) {
    aidi_vision_clientPINVOKE.mask_image_with_clone(SWIGTYPE_p_cv__Mat.getCPtr(source), SWIGTYPE_p_cv__Mat.getCPtr(mask), SWIGTYPE_p_cv__Mat.getCPtr(result));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void transform_image_color(SWIGTYPE_p_cv__Mat source, SWIGTYPE_p_cv__Mat target, int target_channel) {
    aidi_vision_clientPINVOKE.transform_image_color(SWIGTYPE_p_cv__Mat.getCPtr(source), SWIGTYPE_p_cv__Mat.getCPtr(target), target_channel);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void convert_float_and_substract_mean_mat(SWIGTYPE_p_cv__Mat source, FloatVector mean_values, int target_channel) {
    aidi_vision_clientPINVOKE.convert_float_and_substract_mean_mat(SWIGTYPE_p_cv__Mat.getCPtr(source), FloatVector.getCPtr(mean_values), target_channel);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_cudaDeviceProp get_gpu_info(int arg0) {
    SWIGTYPE_p_cudaDeviceProp ret = new SWIGTYPE_p_cudaDeviceProp(aidi_vision_clientPINVOKE.get_gpu_info(arg0), true);
    return ret;
  }

  public static void get_gpus(IntVector gpus, float threshold) {
    aidi_vision_clientPINVOKE.get_gpus__SWIG_0(IntVector.getCPtr(gpus), threshold);
  }

  public static void get_gpus(IntVector gpus) {
    aidi_vision_clientPINVOKE.get_gpus__SWIG_1(IntVector.getCPtr(gpus));
  }

  public static void get_cluster_gpus(IntVector gpus, float threshold) {
    aidi_vision_clientPINVOKE.get_cluster_gpus__SWIG_0(IntVector.getCPtr(gpus), threshold);
  }

  public static void get_cluster_gpus(IntVector gpus) {
    aidi_vision_clientPINVOKE.get_cluster_gpus__SWIG_1(IntVector.getCPtr(gpus));
  }

  public static void get_gpu_memory(SWIGTYPE_p_int gpu, SWIGTYPE_p_size_t free_byte, SWIGTYPE_p_size_t all_byte) {
    aidi_vision_clientPINVOKE.get_gpu_memory(SWIGTYPE_p_int.getCPtr(gpu), SWIGTYPE_p_size_t.getCPtr(free_byte), SWIGTYPE_p_size_t.getCPtr(all_byte));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void get_memory(SWIGTYPE_p_size_t free_byte, SWIGTYPE_p_size_t all_byte) {
    aidi_vision_clientPINVOKE.get_memory(SWIGTYPE_p_size_t.getCPtr(free_byte), SWIGTYPE_p_size_t.getCPtr(all_byte));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int sample_uniform_int(int end) {
    int ret = aidi_vision_clientPINVOKE.sample_uniform_int__SWIG_0(end);
    return ret;
  }

  public static int sample_uniform_int(int start, int end) {
    int ret = aidi_vision_clientPINVOKE.sample_uniform_int__SWIG_1(start, end);
    return ret;
  }

  public static double sample_uniform_double(double start, double end) {
    double ret = aidi_vision_clientPINVOKE.sample_uniform_double(start, end);
    return ret;
  }

  public static double sample_normal_double(double mean, double sigma) {
    double ret = aidi_vision_clientPINVOKE.sample_normal_double(mean, sigma);
    return ret;
  }

  public static void clip_boxes(SWIGTYPE_p_cv__Rect rect, int rows, int cols) {
    aidi_vision_clientPINVOKE.clip_boxes(SWIGTYPE_p_cv__Rect.getCPtr(rect), rows, cols);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void alarm_model_miss() {
    aidi_vision_clientPINVOKE.alarm_model_miss();
  }

  public static IntVector shuffle_index(int len) {
    IntVector ret = new IntVector(aidi_vision_clientPINVOKE.shuffle_index(len), true);
    return ret;
  }

  public static void brightness_augment(SWIGTYPE_p_cv__Mat source, float delta) {
    aidi_vision_clientPINVOKE.brightness_augment(SWIGTYPE_p_cv__Mat.getCPtr(source), delta);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_std__vectorT_cv__Mat_t split_image(SWIGTYPE_p_std__vectorT_cv__Mat_t unsplited_images, IntVector image_shape_, IntVector input_shape_) {
    SWIGTYPE_p_std__vectorT_cv__Mat_t ret = new SWIGTYPE_p_std__vectorT_cv__Mat_t(aidi_vision_clientPINVOKE.split_image(SWIGTYPE_p_std__vectorT_cv__Mat_t.getCPtr(unsplited_images), IntVector.getCPtr(image_shape_), IntVector.getCPtr(input_shape_)), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__vectorT_cv__Mat_t desplit_image(SWIGTYPE_p_std__vectorT_cv__Mat_t splited_images, IntVector image_shape_, IntVector input_shape_) {
    SWIGTYPE_p_std__vectorT_cv__Mat_t ret = new SWIGTYPE_p_std__vectorT_cv__Mat_t(aidi_vision_clientPINVOKE.desplit_image(SWIGTYPE_p_std__vectorT_cv__Mat_t.getCPtr(splited_images), IntVector.getCPtr(image_shape_), IntVector.getCPtr(input_shape_)), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void rotate_image(SWIGTYPE_p_cv__Mat image, SWIGTYPE_p_cv__Mat output, int angle, SWIGTYPE_p_cv__Scalar color, int flags, bool crop) {
    aidi_vision_clientPINVOKE.rotate_image__SWIG_0(SWIGTYPE_p_cv__Mat.getCPtr(image), SWIGTYPE_p_cv__Mat.getCPtr(output), angle, SWIGTYPE_p_cv__Scalar.getCPtr(color), flags, crop);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void rotate_image(SWIGTYPE_p_cv__Mat image, SWIGTYPE_p_cv__Mat output, int angle, SWIGTYPE_p_cv__Scalar color, int flags) {
    aidi_vision_clientPINVOKE.rotate_image__SWIG_1(SWIGTYPE_p_cv__Mat.getCPtr(image), SWIGTYPE_p_cv__Mat.getCPtr(output), angle, SWIGTYPE_p_cv__Scalar.getCPtr(color), flags);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void rotate_image(SWIGTYPE_p_cv__Mat image, SWIGTYPE_p_cv__Mat output, int angle, SWIGTYPE_p_cv__Scalar color) {
    aidi_vision_clientPINVOKE.rotate_image__SWIG_2(SWIGTYPE_p_cv__Mat.getCPtr(image), SWIGTYPE_p_cv__Mat.getCPtr(output), angle, SWIGTYPE_p_cv__Scalar.getCPtr(color));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int count_diff_pixels(SWIGTYPE_p_cv__Mat in1, SWIGTYPE_p_cv__Mat in2) {
    int ret = aidi_vision_clientPINVOKE.count_diff_pixels(SWIGTYPE_p_cv__Mat.getCPtr(in1), SWIGTYPE_p_cv__Mat.getCPtr(in2));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FloatVector get_images_mean_value_bgr(string train_data_path, IntVector train_indexs, string image_format) {
    FloatVector ret = new FloatVector(aidi_vision_clientPINVOKE.get_images_mean_value_bgr__SWIG_0(train_data_path, IntVector.getCPtr(train_indexs), image_format), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FloatVector get_images_mean_value_bgr(string train_data_path, IntVector train_indexs) {
    FloatVector ret = new FloatVector(aidi_vision_clientPINVOKE.get_images_mean_value_bgr__SWIG_1(train_data_path, IntVector.getCPtr(train_indexs)), true);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void change_bn_engine_caffe(SWIGTYPE_p_caffe__NetParameter net_param_ptr) {
    aidi_vision_clientPINVOKE.change_bn_engine_caffe(SWIGTYPE_p_caffe__NetParameter.getCPtr(net_param_ptr));
  }

  public static void change_bn_sync_gpus(SWIGTYPE_p_caffe__NetParameter net_param_ptr, bool open) {
    aidi_vision_clientPINVOKE.change_bn_sync_gpus__SWIG_0(SWIGTYPE_p_caffe__NetParameter.getCPtr(net_param_ptr), open);
  }

  public static void change_bn_sync_gpus(SWIGTYPE_p_caffe__NetParameter net_param_ptr) {
    aidi_vision_clientPINVOKE.change_bn_sync_gpus__SWIG_1(SWIGTYPE_p_caffe__NetParameter.getCPtr(net_param_ptr));
  }

  public static int get_layer_index_by_name(SWIGTYPE_p_caffe__NetT_float_t net_ptr, SWIGTYPE_p_std__string str_query) {
    int ret = aidi_vision_clientPINVOKE.get_layer_index_by_name(SWIGTYPE_p_caffe__NetT_float_t.getCPtr(net_ptr), SWIGTYPE_p_std__string.getCPtr(str_query));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void wrap_output_layer_single_channel(SWIGTYPE_p_caffe__BlobT_float_t out_blob, SWIGTYPE_p_std__vectorT_cv__Mat_t output_mats, int channel_idx) {
    aidi_vision_clientPINVOKE.wrap_output_layer_single_channel__SWIG_0(SWIGTYPE_p_caffe__BlobT_float_t.getCPtr(out_blob), SWIGTYPE_p_std__vectorT_cv__Mat_t.getCPtr(output_mats), channel_idx);
  }

  public static void wrap_output_layer_single_channel(SWIGTYPE_p_caffe__BlobT_float_t out_blob, SWIGTYPE_p_std__vectorT_cv__Mat_t output_mats) {
    aidi_vision_clientPINVOKE.wrap_output_layer_single_channel__SWIG_1(SWIGTYPE_p_caffe__BlobT_float_t.getCPtr(out_blob), SWIGTYPE_p_std__vectorT_cv__Mat_t.getCPtr(output_mats));
  }

  public static void wrap_output_layer_single_channel_segment(SWIGTYPE_p_caffe__BlobT_float_t out_blob, SWIGTYPE_p_std__vectorT_cv__Mat_t output_mats, int channel_idx, bool use_thresh, float thresh) {
    aidi_vision_clientPINVOKE.wrap_output_layer_single_channel_segment__SWIG_0(SWIGTYPE_p_caffe__BlobT_float_t.getCPtr(out_blob), SWIGTYPE_p_std__vectorT_cv__Mat_t.getCPtr(output_mats), channel_idx, use_thresh, thresh);
  }

  public static void wrap_output_layer_single_channel_segment(SWIGTYPE_p_caffe__BlobT_float_t out_blob, SWIGTYPE_p_std__vectorT_cv__Mat_t output_mats, int channel_idx, bool use_thresh) {
    aidi_vision_clientPINVOKE.wrap_output_layer_single_channel_segment__SWIG_1(SWIGTYPE_p_caffe__BlobT_float_t.getCPtr(out_blob), SWIGTYPE_p_std__vectorT_cv__Mat_t.getCPtr(output_mats), channel_idx, use_thresh);
  }

  public static void wrap_output_layer_single_channel_segment(SWIGTYPE_p_caffe__BlobT_float_t out_blob, SWIGTYPE_p_std__vectorT_cv__Mat_t output_mats, int channel_idx) {
    aidi_vision_clientPINVOKE.wrap_output_layer_single_channel_segment__SWIG_2(SWIGTYPE_p_caffe__BlobT_float_t.getCPtr(out_blob), SWIGTYPE_p_std__vectorT_cv__Mat_t.getCPtr(output_mats), channel_idx);
  }

  public static void wrap_output_layer_single_channel_segment(SWIGTYPE_p_caffe__BlobT_float_t out_blob, SWIGTYPE_p_std__vectorT_cv__Mat_t output_mats) {
    aidi_vision_clientPINVOKE.wrap_output_layer_single_channel_segment__SWIG_3(SWIGTYPE_p_caffe__BlobT_float_t.getCPtr(out_blob), SWIGTYPE_p_std__vectorT_cv__Mat_t.getCPtr(output_mats));
  }

  public static void wrap_output_layer_all_channels(SWIGTYPE_p_caffe__BlobT_float_t out_blob, SWIGTYPE_p_std__vectorT_cv__Mat_t output_channels) {
    aidi_vision_clientPINVOKE.wrap_output_layer_all_channels(SWIGTYPE_p_caffe__BlobT_float_t.getCPtr(out_blob), SWIGTYPE_p_std__vectorT_cv__Mat_t.getCPtr(output_channels));
  }

  public static void fill_32fc1_mat_with_const_ptr(SWIGTYPE_p_cv__Mat mat, SWIGTYPE_p_float const_data) {
    aidi_vision_clientPINVOKE.fill_32fc1_mat_with_const_ptr(SWIGTYPE_p_cv__Mat.getCPtr(mat), SWIGTYPE_p_float.getCPtr(const_data));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void random_shift_image(SWIGTYPE_p_cv__Mat source_image, SWIGTYPE_p_cv__Mat result_image, float w_ratio, float h_ratio, SWIGTYPE_p_cv__Point2f move_point) {
    aidi_vision_clientPINVOKE.random_shift_image(SWIGTYPE_p_cv__Mat.getCPtr(source_image), SWIGTYPE_p_cv__Mat.getCPtr(result_image), w_ratio, h_ratio, SWIGTYPE_p_cv__Point2f.getCPtr(move_point));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void shift_image(SWIGTYPE_p_cv__Mat source_image, SWIGTYPE_p_cv__Mat result_image, SWIGTYPE_p_cv__Point2f move_point) {
    aidi_vision_clientPINVOKE.shift_image(SWIGTYPE_p_cv__Mat.getCPtr(source_image), SWIGTYPE_p_cv__Mat.getCPtr(result_image), SWIGTYPE_p_cv__Point2f.getCPtr(move_point));
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void get_contours_for_given_value(SWIGTYPE_p_cv__Mat img, SWIGTYPE_p_std__vectorT_std__vectorT_cv__Point_t_t contours_x, int i_value, bool use_filter, int f_area_min, int f_area_max, int f_width_min, int f_width_max, int f_height_min, int f_height_max) {
    aidi_vision_clientPINVOKE.get_contours_for_given_value(SWIGTYPE_p_cv__Mat.getCPtr(img), SWIGTYPE_p_std__vectorT_std__vectorT_cv__Point_t_t.getCPtr(contours_x), i_value, use_filter, f_area_min, f_area_max, f_width_min, f_width_max, f_height_min, f_height_max);
    if (aidi_vision_clientPINVOKE.SWIGPendingException.Pending) throw aidi_vision_clientPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_std__vectorT_uchar_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_uchar_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_uchar_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_uchar_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_cv__Point {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_cv__Point(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_cv__Point() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_cv__Point obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_std__vectorT_cv__Mat_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_cv__Mat_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_cv__Mat_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_cv__Mat_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_std__vectorT_cv__Point_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_cv__Point_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_cv__Point_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_cv__Point_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_cv__Scalar {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_cv__Scalar(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_cv__Scalar() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_cv__Scalar obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_std__unordered_mapT_std__string_int_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__unordered_mapT_std__string_int_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__unordered_mapT_std__string_int_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__unordered_mapT_std__string_int_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_uint8_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_uint8_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_uint8_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_uint8_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_bool {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_bool(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_bool() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_bool obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_double {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_double(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_double() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_double obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_std__unordered_mapT_int_std__vectorT_cv__Rect_t_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__unordered_mapT_int_std__vectorT_cv__Rect_t_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__unordered_mapT_int_std__vectorT_cv__Rect_t_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__unordered_mapT_int_std__vectorT_cv__Rect_t_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_cv__Size2f {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_cv__Size2f(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_cv__Size2f() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_cv__Size2f obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_size_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_size_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_size_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_size_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_float_t_t_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_float_t_t_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_float_t_t_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_float_t_t_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_std__vectorT_cv__Rect_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_cv__Rect_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_cv__Rect_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_cv__Rect_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_Json__Value {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_Json__Value(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_Json__Value() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_Json__Value obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_std__vectorT_aq__BaseDetectResult_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_aq__BaseDetectResult_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_aq__BaseDetectResult_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_aq__BaseDetectResult_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_std__unordered_mapT_int_int_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__unordered_mapT_int_int_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__unordered_mapT_int_int_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__unordered_mapT_int_int_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_std__string {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__string(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__string() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__string obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_cv__Rect {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_cv__Rect(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_cv__Rect() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_cv__Rect obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_cudaDeviceProp {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_cudaDeviceProp(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_cudaDeviceProp() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_cudaDeviceProp obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_std__vectorT_aq__BaseDefect_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_aq__BaseDefect_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_aq__BaseDefect_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_aq__BaseDefect_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_int {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_int(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_int() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_int obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_caffe__NetParameter {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_caffe__NetParameter(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_caffe__NetParameter() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_caffe__NetParameter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_unsigned_char {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_unsigned_char(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_unsigned_char() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_unsigned_char obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_cv__Mat {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_cv__Mat(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_cv__Mat() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_cv__Mat obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_caffe__NetT_float_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_caffe__NetT_float_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_caffe__NetT_float_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_caffe__NetT_float_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_caffe__BlobT_float_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_caffe__BlobT_float_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_caffe__BlobT_float_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_caffe__BlobT_float_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_QString {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_QString(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_QString() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_QString obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_std__vectorT_std__vectorT_cv__Point_t_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_std__vectorT_cv__Point_t_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_std__vectorT_cv__Point_t_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_std__vectorT_cv__Point_t_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_cv__Point2f {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_cv__Point2f(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_cv__Point2f() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_cv__Point2f obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_QDomElement {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_QDomElement(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_QDomElement() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_QDomElement obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_uchar {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_uchar(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_uchar() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_uchar obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_float {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_float(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_float() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_float obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace aqrose.aidi_vision_client {

public class SWIGTYPE_p_std__unordered_mapT_int_std__string_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__unordered_mapT_int_std__string_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__unordered_mapT_int_std__string_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__unordered_mapT_int_std__string_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
